// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/api/os/build/v0/api.proto

package v0

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BootType represents a boot mechanism.
type BootType int32

const (
	// Represents a null BootType.
	BootType_BOOT_NONE BootType = 0
	// Use master-boot-record for booting.
	BootType_BOOT_MBR BootType = 1
	// Use UEFI for booting.
	BootType_BOOT_EFI BootType = 2
)

var BootType_name = map[int32]string{
	0: "BOOT_NONE",
	1: "BOOT_MBR",
	2: "BOOT_EFI",
}

var BootType_value = map[string]int32{
	"BOOT_NONE": 0,
	"BOOT_MBR":  1,
	"BOOT_EFI":  2,
}

func (x BootType) String() string {
	return proto.EnumName(BootType_name, int32(x))
}

func (BootType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e368bde7568fc2fd, []int{0}
}

// BuildConfiguration specifies configuration parameters for building the OS.
type BuildConfiguration struct {
	// The name of the operating system.
	OsName string `protobuf:"bytes,1,opt,name=os_name,json=osName,proto3" json:"os_name,omitempty"`
	// Configuration for dependencies.
	Deps *DependencyConfiguration `protobuf:"bytes,2,opt,name=deps,proto3" json:"deps,omitempty"`
	// Configuration for profiles.
	Profiles             []*BuildProfile `protobuf:"bytes,3,rep,name=profiles,proto3" json:"profiles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *BuildConfiguration) Reset()      { *m = BuildConfiguration{} }
func (*BuildConfiguration) ProtoMessage() {}
func (*BuildConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_e368bde7568fc2fd, []int{0}
}
func (m *BuildConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuildConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BuildConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildConfiguration.Merge(m, src)
}
func (m *BuildConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *BuildConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_BuildConfiguration proto.InternalMessageInfo

func (m *BuildConfiguration) GetOsName() string {
	if m != nil {
		return m.OsName
	}
	return ""
}

func (m *BuildConfiguration) GetDeps() *DependencyConfiguration {
	if m != nil {
		return m.Deps
	}
	return nil
}

func (m *BuildConfiguration) GetProfiles() []*BuildProfile {
	if m != nil {
		return m.Profiles
	}
	return nil
}

// BuildProfile specifies configuration parameters for a specific build profile.
type BuildProfile struct {
	// The name of the profile.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The architecture to build for.
	Arch string `protobuf:"bytes,2,opt,name=arch,proto3" json:"arch,omitempty"`
	// The path of the output artifact.
	Artifact string `protobuf:"bytes,3,opt,name=artifact,proto3" json:"artifact,omitempty"`
	// The type of boot mechanism.
	BootType BootType `protobuf:"varint,4,opt,name=boot_type,json=bootType,proto3,enum=os.build.BootType" json:"boot_type,omitempty"`
	// Whether to allow building with a source tree different from the origin.
	AllowUnclean bool `protobuf:"varint,5,opt,name=allow_unclean,json=allowUnclean,proto3" json:"allow_unclean,omitempty"`
	// Whether to allow building with a source tree that is unsigned.
	AllowUnsigned bool `protobuf:"varint,6,opt,name=allow_unsigned,json=allowUnsigned,proto3" json:"allow_unsigned,omitempty"`
	// The optional guid to use for the EFI platform.
	EfiGuidPlatform string `protobuf:"bytes,7,opt,name=efi_guid_platform,json=efiGuidPlatform,proto3" json:"efi_guid_platform,omitempty"`
	// The optional guid to use for the EFI file.
	EfiGuidFile string `protobuf:"bytes,8,opt,name=efi_guid_file,json=efiGuidFile,proto3" json:"efi_guid_file,omitempty"`
	// The optional guid to use for the EFI package.
	EfiGuidPackage string `protobuf:"bytes,9,opt,name=efi_guid_package,json=efiGuidPackage,proto3" json:"efi_guid_package,omitempty"`
	// The optional guid to use for the EFI token.
	EfiGuidToken         string   `protobuf:"bytes,10,opt,name=efi_guid_token,json=efiGuidToken,proto3" json:"efi_guid_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildProfile) Reset()      { *m = BuildProfile{} }
func (*BuildProfile) ProtoMessage() {}
func (*BuildProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_e368bde7568fc2fd, []int{1}
}
func (m *BuildProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuildProfile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BuildProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildProfile.Merge(m, src)
}
func (m *BuildProfile) XXX_Size() int {
	return m.Size()
}
func (m *BuildProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildProfile.DiscardUnknown(m)
}

var xxx_messageInfo_BuildProfile proto.InternalMessageInfo

func (m *BuildProfile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BuildProfile) GetArch() string {
	if m != nil {
		return m.Arch
	}
	return ""
}

func (m *BuildProfile) GetArtifact() string {
	if m != nil {
		return m.Artifact
	}
	return ""
}

func (m *BuildProfile) GetBootType() BootType {
	if m != nil {
		return m.BootType
	}
	return BootType_BOOT_NONE
}

func (m *BuildProfile) GetAllowUnclean() bool {
	if m != nil {
		return m.AllowUnclean
	}
	return false
}

func (m *BuildProfile) GetAllowUnsigned() bool {
	if m != nil {
		return m.AllowUnsigned
	}
	return false
}

func (m *BuildProfile) GetEfiGuidPlatform() string {
	if m != nil {
		return m.EfiGuidPlatform
	}
	return ""
}

func (m *BuildProfile) GetEfiGuidFile() string {
	if m != nil {
		return m.EfiGuidFile
	}
	return ""
}

func (m *BuildProfile) GetEfiGuidPackage() string {
	if m != nil {
		return m.EfiGuidPackage
	}
	return ""
}

func (m *BuildProfile) GetEfiGuidToken() string {
	if m != nil {
		return m.EfiGuidToken
	}
	return ""
}

// DependencyConfiguration specifies configuration parameters for
// OS build dependencies.
type DependencyConfiguration struct {
	// Configuration for EDK2.
	Edk2 *Edk2Configuration `protobuf:"bytes,1,opt,name=edk2,proto3" json:"edk2,omitempty"`
	// Configuration for ACPICA.
	Acpica               *AcpicaConfiguration `protobuf:"bytes,2,opt,name=acpica,proto3" json:"acpica,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *DependencyConfiguration) Reset()      { *m = DependencyConfiguration{} }
func (*DependencyConfiguration) ProtoMessage() {}
func (*DependencyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_e368bde7568fc2fd, []int{2}
}
func (m *DependencyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DependencyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DependencyConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DependencyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DependencyConfiguration.Merge(m, src)
}
func (m *DependencyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *DependencyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_DependencyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_DependencyConfiguration proto.InternalMessageInfo

func (m *DependencyConfiguration) GetEdk2() *Edk2Configuration {
	if m != nil {
		return m.Edk2
	}
	return nil
}

func (m *DependencyConfiguration) GetAcpica() *AcpicaConfiguration {
	if m != nil {
		return m.Acpica
	}
	return nil
}

// Edk2Configuration specifies configuration parameters for EDK2.
type Edk2Configuration struct {
	// The url for the git repository.
	GitUrl string `protobuf:"bytes,1,opt,name=gitUrl,proto3" json:"gitUrl,omitempty"`
	// The tag to checkout.
	Tag                  string   `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Edk2Configuration) Reset()      { *m = Edk2Configuration{} }
func (*Edk2Configuration) ProtoMessage() {}
func (*Edk2Configuration) Descriptor() ([]byte, []int) {
	return fileDescriptor_e368bde7568fc2fd, []int{3}
}
func (m *Edk2Configuration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Edk2Configuration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Edk2Configuration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Edk2Configuration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Edk2Configuration.Merge(m, src)
}
func (m *Edk2Configuration) XXX_Size() int {
	return m.Size()
}
func (m *Edk2Configuration) XXX_DiscardUnknown() {
	xxx_messageInfo_Edk2Configuration.DiscardUnknown(m)
}

var xxx_messageInfo_Edk2Configuration proto.InternalMessageInfo

func (m *Edk2Configuration) GetGitUrl() string {
	if m != nil {
		return m.GitUrl
	}
	return ""
}

func (m *Edk2Configuration) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

// AcpicaConfiguration specifies configuration parameters for ACPICA.
type AcpicaConfiguration struct {
	// The url for the git repository.
	GitUrl string `protobuf:"bytes,1,opt,name=gitUrl,proto3" json:"gitUrl,omitempty"`
	// The tag to checkout.
	Tag                  string   `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AcpicaConfiguration) Reset()      { *m = AcpicaConfiguration{} }
func (*AcpicaConfiguration) ProtoMessage() {}
func (*AcpicaConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_e368bde7568fc2fd, []int{4}
}
func (m *AcpicaConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AcpicaConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AcpicaConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AcpicaConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcpicaConfiguration.Merge(m, src)
}
func (m *AcpicaConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *AcpicaConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_AcpicaConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_AcpicaConfiguration proto.InternalMessageInfo

func (m *AcpicaConfiguration) GetGitUrl() string {
	if m != nil {
		return m.GitUrl
	}
	return ""
}

func (m *AcpicaConfiguration) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

// BuildInfo records additional information about the build.
type BuildInfo struct {
	// The version string.
	VersionStr string `protobuf:"bytes,1,opt,name=version_str,json=versionStr,proto3" json:"version_str,omitempty"`
	// The major version number.
	VersionMajorNum uint32 `protobuf:"varint,2,opt,name=version_major_num,json=versionMajorNum,proto3" json:"version_major_num,omitempty"`
	// The minor version number.
	VersionMinorNum uint32 `protobuf:"varint,3,opt,name=version_minor_num,json=versionMinorNum,proto3" json:"version_minor_num,omitempty"`
	// The revision number.
	RevisionNum uint32 `protobuf:"varint,4,opt,name=revision_num,json=revisionNum,proto3" json:"revision_num,omitempty"`
	// A uuid to refer to the build.
	Uuid string `protobuf:"bytes,5,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// The source control snapshot.
	Scm *ScmSnapshot `protobuf:"bytes,6,opt,name=scm,proto3" json:"scm,omitempty"`
	// The time of the build in UTC.
	Timestamp uint64 `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The username of the build.
	Username string `protobuf:"bytes,8,opt,name=username,proto3" json:"username,omitempty"`
	// The version of Go.
	GoVersionStr string `protobuf:"bytes,9,opt,name=go_version_str,json=goVersionStr,proto3" json:"go_version_str,omitempty"`
	// The host OS.
	HostOs string `protobuf:"bytes,10,opt,name=host_os,json=hostOs,proto3" json:"host_os,omitempty"`
	// The host architecture.
	HostArch             string   `protobuf:"bytes,11,opt,name=host_arch,json=hostArch,proto3" json:"host_arch,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildInfo) Reset()      { *m = BuildInfo{} }
func (*BuildInfo) ProtoMessage() {}
func (*BuildInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e368bde7568fc2fd, []int{5}
}
func (m *BuildInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuildInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BuildInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildInfo.Merge(m, src)
}
func (m *BuildInfo) XXX_Size() int {
	return m.Size()
}
func (m *BuildInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BuildInfo proto.InternalMessageInfo

func (m *BuildInfo) GetVersionStr() string {
	if m != nil {
		return m.VersionStr
	}
	return ""
}

func (m *BuildInfo) GetVersionMajorNum() uint32 {
	if m != nil {
		return m.VersionMajorNum
	}
	return 0
}

func (m *BuildInfo) GetVersionMinorNum() uint32 {
	if m != nil {
		return m.VersionMinorNum
	}
	return 0
}

func (m *BuildInfo) GetRevisionNum() uint32 {
	if m != nil {
		return m.RevisionNum
	}
	return 0
}

func (m *BuildInfo) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *BuildInfo) GetScm() *ScmSnapshot {
	if m != nil {
		return m.Scm
	}
	return nil
}

func (m *BuildInfo) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BuildInfo) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *BuildInfo) GetGoVersionStr() string {
	if m != nil {
		return m.GoVersionStr
	}
	return ""
}

func (m *BuildInfo) GetHostOs() string {
	if m != nil {
		return m.HostOs
	}
	return ""
}

func (m *BuildInfo) GetHostArch() string {
	if m != nil {
		return m.HostArch
	}
	return ""
}

// ScmSnapshot records information about the state of source control management at build time.
type ScmSnapshot struct {
	// The commit hash.
	CommitHash string `protobuf:"bytes,1,opt,name=commit_hash,json=commitHash,proto3" json:"commit_hash,omitempty"`
	// The author name.
	AuthorName string `protobuf:"bytes,2,opt,name=author_name,json=authorName,proto3" json:"author_name,omitempty"`
	// The author email.
	AuthorEmail string `protobuf:"bytes,3,opt,name=author_email,json=authorEmail,proto3" json:"author_email,omitempty"`
	// The author time in UTC.
	AuthorTime uint64 `protobuf:"varint,4,opt,name=author_time,json=authorTime,proto3" json:"author_time,omitempty"`
	// The branch name locally.
	BranchLocal string `protobuf:"bytes,5,opt,name=branch_local,json=branchLocal,proto3" json:"branch_local,omitempty"`
	// The remote branch name.
	BranchRemote string `protobuf:"bytes,6,opt,name=branch_remote,json=branchRemote,proto3" json:"branch_remote,omitempty"`
	// The the remote url.
	RemoteUrl string `protobuf:"bytes,7,opt,name=remote_url,json=remoteUrl,proto3" json:"remote_url,omitempty"`
	// Whether the commit is signed.
	IsSigned bool `protobuf:"varint,8,opt,name=is_signed,json=isSigned,proto3" json:"is_signed,omitempty"`
	// Whether the branch is clean.
	IsClean              bool     `protobuf:"varint,9,opt,name=is_clean,json=isClean,proto3" json:"is_clean,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScmSnapshot) Reset()      { *m = ScmSnapshot{} }
func (*ScmSnapshot) ProtoMessage() {}
func (*ScmSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_e368bde7568fc2fd, []int{6}
}
func (m *ScmSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScmSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScmSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScmSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScmSnapshot.Merge(m, src)
}
func (m *ScmSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *ScmSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_ScmSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_ScmSnapshot proto.InternalMessageInfo

func (m *ScmSnapshot) GetCommitHash() string {
	if m != nil {
		return m.CommitHash
	}
	return ""
}

func (m *ScmSnapshot) GetAuthorName() string {
	if m != nil {
		return m.AuthorName
	}
	return ""
}

func (m *ScmSnapshot) GetAuthorEmail() string {
	if m != nil {
		return m.AuthorEmail
	}
	return ""
}

func (m *ScmSnapshot) GetAuthorTime() uint64 {
	if m != nil {
		return m.AuthorTime
	}
	return 0
}

func (m *ScmSnapshot) GetBranchLocal() string {
	if m != nil {
		return m.BranchLocal
	}
	return ""
}

func (m *ScmSnapshot) GetBranchRemote() string {
	if m != nil {
		return m.BranchRemote
	}
	return ""
}

func (m *ScmSnapshot) GetRemoteUrl() string {
	if m != nil {
		return m.RemoteUrl
	}
	return ""
}

func (m *ScmSnapshot) GetIsSigned() bool {
	if m != nil {
		return m.IsSigned
	}
	return false
}

func (m *ScmSnapshot) GetIsClean() bool {
	if m != nil {
		return m.IsClean
	}
	return false
}

func init() {
	proto.RegisterEnum("os.build.BootType", BootType_name, BootType_value)
	proto.RegisterType((*BuildConfiguration)(nil), "os.build.BuildConfiguration")
	proto.RegisterType((*BuildProfile)(nil), "os.build.BuildProfile")
	proto.RegisterType((*DependencyConfiguration)(nil), "os.build.DependencyConfiguration")
	proto.RegisterType((*Edk2Configuration)(nil), "os.build.Edk2Configuration")
	proto.RegisterType((*AcpicaConfiguration)(nil), "os.build.AcpicaConfiguration")
	proto.RegisterType((*BuildInfo)(nil), "os.build.BuildInfo")
	proto.RegisterType((*ScmSnapshot)(nil), "os.build.ScmSnapshot")
}

func init() { proto.RegisterFile("pkg/api/os/build/v0/api.proto", fileDescriptor_e368bde7568fc2fd) }

var fileDescriptor_e368bde7568fc2fd = []byte{
	// 898 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0xcd, 0x6e, 0x23, 0x45,
	0x10, 0xc7, 0x33, 0xb6, 0x71, 0x66, 0x6a, 0xec, 0xac, 0xb7, 0x81, 0x64, 0x48, 0x88, 0x71, 0x0c,
	0x08, 0x6b, 0x25, 0x62, 0x64, 0x14, 0x89, 0x0b, 0x42, 0x9b, 0x25, 0x0b, 0x2b, 0xb1, 0xc9, 0x6a,
	0x92, 0xe5, 0xc0, 0x65, 0xd4, 0x1e, 0xb7, 0xc7, 0x8d, 0x67, 0xa6, 0x47, 0xd3, 0x3d, 0x41, 0xb9,
	0xc1, 0x5b, 0xf0, 0x08, 0x9c, 0x79, 0x0a, 0x8e, 0x1c, 0x39, 0x12, 0xbf, 0x00, 0x1c, 0x11, 0x27,
	0xd4, 0xd5, 0xed, 0x8f, 0x04, 0x38, 0xec, 0xad, 0xeb, 0x5f, 0xbf, 0x2a, 0xb7, 0xab, 0xaa, 0x6b,
	0xe0, 0xb0, 0x98, 0x27, 0x43, 0x5a, 0xf0, 0xa1, 0x90, 0xc3, 0x71, 0xc5, 0xd3, 0xc9, 0xf0, 0xfa,
	0x23, 0x6d, 0x1f, 0x17, 0xa5, 0x50, 0x82, 0xb8, 0x42, 0x1e, 0xa3, 0xbc, 0xff, 0x46, 0x22, 0x12,
	0x81, 0xe2, 0x50, 0x9f, 0x8c, 0x7f, 0xff, 0x20, 0x11, 0x22, 0x49, 0xd9, 0x10, 0xad, 0x71, 0x35,
	0x1d, 0xb2, 0xac, 0x50, 0x37, 0xc6, 0xd9, 0xff, 0xd1, 0x01, 0x72, 0xaa, 0x83, 0x9f, 0x88, 0x7c,
	0xca, 0x93, 0xaa, 0xa4, 0x8a, 0x8b, 0x9c, 0xec, 0xc1, 0xb6, 0x90, 0x51, 0x4e, 0x33, 0x16, 0x38,
	0x3d, 0x67, 0xe0, 0x85, 0x4d, 0x21, 0xcf, 0x69, 0xc6, 0xc8, 0x09, 0x34, 0x26, 0xac, 0x90, 0x41,
	0xad, 0xe7, 0x0c, 0xfc, 0xd1, 0xd1, 0xf1, 0xf2, 0xb7, 0x8f, 0x3f, 0x67, 0x05, 0xcb, 0x27, 0x2c,
	0x8f, 0x6f, 0xee, 0x64, 0x0a, 0x11, 0x27, 0x23, 0x70, 0x8b, 0x52, 0x4c, 0x79, 0xca, 0x64, 0x50,
	0xef, 0xd5, 0x07, 0xfe, 0x68, 0x77, 0x1d, 0x8a, 0xbf, 0xff, 0xc2, 0xb8, 0xc3, 0x15, 0xd7, 0xff,
	0xa3, 0x06, 0xad, 0x4d, 0x17, 0x21, 0xd0, 0xd8, 0xb8, 0x11, 0x9e, 0xb5, 0x46, 0xcb, 0x78, 0x86,
	0xf7, 0xf1, 0x42, 0x3c, 0x93, 0x7d, 0x70, 0x69, 0xa9, 0xf8, 0x94, 0xc6, 0x2a, 0xa8, 0xa3, 0xbe,
	0xb2, 0xc9, 0x10, 0xbc, 0xb1, 0x10, 0x2a, 0x52, 0x37, 0x05, 0x0b, 0x1a, 0x3d, 0x67, 0xb0, 0x33,
	0x22, 0x1b, 0x37, 0x11, 0x42, 0x5d, 0xdd, 0x14, 0x2c, 0x74, 0xc7, 0xf6, 0x44, 0xde, 0x85, 0x36,
	0x4d, 0x53, 0xf1, 0x5d, 0x54, 0xe5, 0x71, 0xca, 0x68, 0x1e, 0xbc, 0xd6, 0x73, 0x06, 0x6e, 0xd8,
	0x42, 0xf1, 0xa5, 0xd1, 0xc8, 0xfb, 0xb0, 0xb3, 0x84, 0x24, 0x4f, 0x72, 0x36, 0x09, 0x9a, 0x48,
	0xb5, 0x2d, 0x65, 0x44, 0xf2, 0x08, 0x1e, 0xb2, 0x29, 0x8f, 0x92, 0x8a, 0x4f, 0xa2, 0x22, 0xa5,
	0x6a, 0x2a, 0xca, 0x2c, 0xd8, 0xc6, 0x1b, 0x3e, 0x60, 0x53, 0xfe, 0x45, 0xc5, 0x27, 0x2f, 0xac,
	0x4c, 0xfa, 0xd0, 0x5e, 0xb1, 0xfa, 0xdf, 0x07, 0x2e, 0x72, 0xbe, 0xe5, 0x9e, 0xea, 0x82, 0x0c,
	0xa0, 0xb3, 0xce, 0x47, 0xe3, 0x39, 0x4d, 0x58, 0xe0, 0x21, 0xb6, 0xb3, 0x4c, 0x67, 0x54, 0xf2,
	0x1e, 0xec, 0xac, 0x48, 0x25, 0xe6, 0x2c, 0x0f, 0x00, 0xb9, 0x96, 0xe5, 0xae, 0xb4, 0xd6, 0xff,
	0xc1, 0x81, 0xbd, 0xff, 0xe9, 0x23, 0x19, 0x42, 0x83, 0x4d, 0xe6, 0x23, 0x2c, 0xbe, 0x3f, 0x3a,
	0x58, 0xd7, 0xec, 0x6c, 0x32, 0x1f, 0xdd, 0x6b, 0xb9, 0x06, 0xc9, 0x09, 0x34, 0x69, 0x5c, 0xf0,
	0x98, 0xda, 0x59, 0x39, 0x5c, 0x87, 0x3c, 0x46, 0xfd, 0x6e, 0x90, 0x85, 0xfb, 0x9f, 0xc2, 0xc3,
	0x7f, 0x65, 0x24, 0xbb, 0xd0, 0x4c, 0xb8, 0x7a, 0x59, 0xa6, 0xcb, 0x69, 0x34, 0x16, 0xe9, 0x40,
	0x5d, 0xd1, 0xc4, 0x36, 0x5f, 0x1f, 0xfb, 0x9f, 0xc1, 0xeb, 0xff, 0x91, 0xfd, 0x15, 0x12, 0xfc,
	0x5d, 0x03, 0x0f, 0xa7, 0xee, 0x59, 0x3e, 0x15, 0xe4, 0x1d, 0xf0, 0xaf, 0x59, 0x29, 0xb9, 0xc8,
	0x23, 0xa9, 0x4a, 0x1b, 0x0c, 0x56, 0xba, 0x54, 0xa5, 0x6e, 0xe9, 0x12, 0xc8, 0xe8, 0xb7, 0xa2,
	0x8c, 0xf2, 0x2a, 0xc3, 0x74, 0xed, 0xf0, 0x81, 0x75, 0x3c, 0xd7, 0xfa, 0x79, 0x95, 0xdd, 0x61,
	0x79, 0x6e, 0xd9, 0xfa, 0x5d, 0x56, 0xeb, 0x9a, 0x3d, 0x82, 0x56, 0xc9, 0xae, 0x39, 0xc2, 0x1a,
	0x6b, 0x20, 0xe6, 0x2f, 0x35, 0x8d, 0x10, 0x68, 0x54, 0x15, 0x9f, 0xe0, 0x40, 0x7a, 0x21, 0x9e,
	0xc9, 0x07, 0x50, 0x97, 0x71, 0x86, 0xd3, 0xe7, 0x8f, 0xde, 0x5c, 0x57, 0xfc, 0x32, 0xce, 0x2e,
	0x73, 0x5a, 0xc8, 0x99, 0x50, 0xa1, 0x26, 0xc8, 0xdb, 0xe0, 0x29, 0x9e, 0x31, 0xa9, 0x68, 0x56,
	0xe0, 0x08, 0x36, 0xc2, 0xb5, 0xa0, 0x5f, 0x50, 0x25, 0x59, 0x89, 0xaf, 0xcd, 0xcc, 0xdd, 0xca,
	0xd6, 0xa3, 0x94, 0x88, 0x68, 0xb3, 0x2a, 0x66, 0xe4, 0x5a, 0x89, 0xf8, 0x7a, 0x5d, 0x97, 0x3d,
	0xd8, 0x9e, 0x09, 0xa9, 0x22, 0x21, 0xed, 0xa4, 0x35, 0xb5, 0x79, 0x21, 0xc9, 0x01, 0x78, 0xe8,
	0xc0, 0x57, 0xeb, 0x9b, 0xdc, 0x5a, 0x78, 0x5c, 0xc6, 0xb3, 0xfe, 0xcf, 0x35, 0xf0, 0x37, 0xae,
	0xaa, 0xcb, 0x1f, 0x8b, 0x2c, 0xe3, 0x2a, 0x9a, 0x51, 0x39, 0x5b, 0x96, 0xdf, 0x48, 0x5f, 0x52,
	0x39, 0xd3, 0x00, 0xad, 0xd4, 0x4c, 0xd7, 0x52, 0xdf, 0xd5, 0xf4, 0x11, 0x8c, 0x84, 0xfb, 0xea,
	0x08, 0x5a, 0x16, 0x60, 0x19, 0xe5, 0xa9, 0xdd, 0x07, 0x36, 0xe8, 0x4c, 0x4b, 0x1b, 0x39, 0x74,
	0x01, 0xb0, 0xd2, 0x8d, 0x65, 0x8e, 0x2b, 0x6e, 0x72, 0x8c, 0x4b, 0x9a, 0xc7, 0xb3, 0x28, 0x15,
	0x31, 0x4d, 0x6d, 0xc1, 0x7d, 0xa3, 0x7d, 0xa5, 0x25, 0xbd, 0x25, 0x2c, 0x52, 0xb2, 0x4c, 0x28,
	0x86, 0x1d, 0xf0, 0x42, 0x1b, 0x17, 0xa2, 0x46, 0x0e, 0x01, 0x8c, 0x37, 0xaa, 0xca, 0xd4, 0xbe,
	0x7b, 0xcf, 0x28, 0x7a, 0x16, 0x0f, 0xc0, 0xe3, 0x32, 0xb2, 0xfb, 0xc3, 0xc5, 0xfd, 0xe1, 0x72,
	0x79, 0x69, 0x56, 0xc7, 0x5b, 0xe0, 0x72, 0x19, 0x99, 0x0d, 0xe4, 0xa1, 0x6f, 0x9b, 0xcb, 0x27,
	0xda, 0x7c, 0x74, 0x02, 0xee, 0x72, 0x6f, 0x91, 0x36, 0x78, 0xa7, 0x17, 0x17, 0x57, 0xd1, 0xf9,
	0xc5, 0xf9, 0x59, 0x67, 0x8b, 0xb4, 0xc0, 0x45, 0xf3, 0xf9, 0x69, 0xd8, 0x71, 0x56, 0xd6, 0xd9,
	0xd3, 0x67, 0x9d, 0xda, 0xe9, 0x27, 0xbf, 0xdd, 0x76, 0xb7, 0xfe, 0xbc, 0xed, 0x3a, 0x7f, 0xdd,
	0x76, 0xb7, 0xbe, 0x5f, 0x74, 0x9d, 0x9f, 0x16, 0x5d, 0xe7, 0x97, 0x45, 0xd7, 0xf9, 0x75, 0xd1,
	0x75, 0x7e, 0x5f, 0x74, 0x9d, 0x6f, 0x76, 0x69, 0xaa, 0x3e, 0x14, 0xf2, 0xfe, 0xa7, 0x67, 0xdc,
	0xc4, 0x4f, 0xc7, 0xc7, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x77, 0xe4, 0x91, 0x14, 0x98, 0x06,
	0x00, 0x00,
}

func (this *BuildConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BuildConfiguration)
	if !ok {
		that2, ok := that.(BuildConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OsName != that1.OsName {
		return false
	}
	if !this.Deps.Equal(that1.Deps) {
		return false
	}
	if len(this.Profiles) != len(that1.Profiles) {
		return false
	}
	for i := range this.Profiles {
		if !this.Profiles[i].Equal(that1.Profiles[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *BuildProfile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BuildProfile)
	if !ok {
		that2, ok := that.(BuildProfile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Arch != that1.Arch {
		return false
	}
	if this.Artifact != that1.Artifact {
		return false
	}
	if this.BootType != that1.BootType {
		return false
	}
	if this.AllowUnclean != that1.AllowUnclean {
		return false
	}
	if this.AllowUnsigned != that1.AllowUnsigned {
		return false
	}
	if this.EfiGuidPlatform != that1.EfiGuidPlatform {
		return false
	}
	if this.EfiGuidFile != that1.EfiGuidFile {
		return false
	}
	if this.EfiGuidPackage != that1.EfiGuidPackage {
		return false
	}
	if this.EfiGuidToken != that1.EfiGuidToken {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DependencyConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DependencyConfiguration)
	if !ok {
		that2, ok := that.(DependencyConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Edk2.Equal(that1.Edk2) {
		return false
	}
	if !this.Acpica.Equal(that1.Acpica) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Edk2Configuration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Edk2Configuration)
	if !ok {
		that2, ok := that.(Edk2Configuration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GitUrl != that1.GitUrl {
		return false
	}
	if this.Tag != that1.Tag {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AcpicaConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AcpicaConfiguration)
	if !ok {
		that2, ok := that.(AcpicaConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GitUrl != that1.GitUrl {
		return false
	}
	if this.Tag != that1.Tag {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *BuildInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BuildInfo)
	if !ok {
		that2, ok := that.(BuildInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VersionStr != that1.VersionStr {
		return false
	}
	if this.VersionMajorNum != that1.VersionMajorNum {
		return false
	}
	if this.VersionMinorNum != that1.VersionMinorNum {
		return false
	}
	if this.RevisionNum != that1.RevisionNum {
		return false
	}
	if this.Uuid != that1.Uuid {
		return false
	}
	if !this.Scm.Equal(that1.Scm) {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	if this.GoVersionStr != that1.GoVersionStr {
		return false
	}
	if this.HostOs != that1.HostOs {
		return false
	}
	if this.HostArch != that1.HostArch {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ScmSnapshot) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScmSnapshot)
	if !ok {
		that2, ok := that.(ScmSnapshot)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CommitHash != that1.CommitHash {
		return false
	}
	if this.AuthorName != that1.AuthorName {
		return false
	}
	if this.AuthorEmail != that1.AuthorEmail {
		return false
	}
	if this.AuthorTime != that1.AuthorTime {
		return false
	}
	if this.BranchLocal != that1.BranchLocal {
		return false
	}
	if this.BranchRemote != that1.BranchRemote {
		return false
	}
	if this.RemoteUrl != that1.RemoteUrl {
		return false
	}
	if this.IsSigned != that1.IsSigned {
		return false
	}
	if this.IsClean != that1.IsClean {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *BuildConfiguration) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&v0.BuildConfiguration{")
	s = append(s, "OsName: "+fmt.Sprintf("%#v", this.OsName)+",\n")
	if this.Deps != nil {
		s = append(s, "Deps: "+fmt.Sprintf("%#v", this.Deps)+",\n")
	}
	if this.Profiles != nil {
		s = append(s, "Profiles: "+fmt.Sprintf("%#v", this.Profiles)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BuildProfile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&v0.BuildProfile{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Arch: "+fmt.Sprintf("%#v", this.Arch)+",\n")
	s = append(s, "Artifact: "+fmt.Sprintf("%#v", this.Artifact)+",\n")
	s = append(s, "BootType: "+fmt.Sprintf("%#v", this.BootType)+",\n")
	s = append(s, "AllowUnclean: "+fmt.Sprintf("%#v", this.AllowUnclean)+",\n")
	s = append(s, "AllowUnsigned: "+fmt.Sprintf("%#v", this.AllowUnsigned)+",\n")
	s = append(s, "EfiGuidPlatform: "+fmt.Sprintf("%#v", this.EfiGuidPlatform)+",\n")
	s = append(s, "EfiGuidFile: "+fmt.Sprintf("%#v", this.EfiGuidFile)+",\n")
	s = append(s, "EfiGuidPackage: "+fmt.Sprintf("%#v", this.EfiGuidPackage)+",\n")
	s = append(s, "EfiGuidToken: "+fmt.Sprintf("%#v", this.EfiGuidToken)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DependencyConfiguration) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&v0.DependencyConfiguration{")
	if this.Edk2 != nil {
		s = append(s, "Edk2: "+fmt.Sprintf("%#v", this.Edk2)+",\n")
	}
	if this.Acpica != nil {
		s = append(s, "Acpica: "+fmt.Sprintf("%#v", this.Acpica)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Edk2Configuration) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&v0.Edk2Configuration{")
	s = append(s, "GitUrl: "+fmt.Sprintf("%#v", this.GitUrl)+",\n")
	s = append(s, "Tag: "+fmt.Sprintf("%#v", this.Tag)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AcpicaConfiguration) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&v0.AcpicaConfiguration{")
	s = append(s, "GitUrl: "+fmt.Sprintf("%#v", this.GitUrl)+",\n")
	s = append(s, "Tag: "+fmt.Sprintf("%#v", this.Tag)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BuildInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&v0.BuildInfo{")
	s = append(s, "VersionStr: "+fmt.Sprintf("%#v", this.VersionStr)+",\n")
	s = append(s, "VersionMajorNum: "+fmt.Sprintf("%#v", this.VersionMajorNum)+",\n")
	s = append(s, "VersionMinorNum: "+fmt.Sprintf("%#v", this.VersionMinorNum)+",\n")
	s = append(s, "RevisionNum: "+fmt.Sprintf("%#v", this.RevisionNum)+",\n")
	s = append(s, "Uuid: "+fmt.Sprintf("%#v", this.Uuid)+",\n")
	if this.Scm != nil {
		s = append(s, "Scm: "+fmt.Sprintf("%#v", this.Scm)+",\n")
	}
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	s = append(s, "GoVersionStr: "+fmt.Sprintf("%#v", this.GoVersionStr)+",\n")
	s = append(s, "HostOs: "+fmt.Sprintf("%#v", this.HostOs)+",\n")
	s = append(s, "HostArch: "+fmt.Sprintf("%#v", this.HostArch)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ScmSnapshot) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&v0.ScmSnapshot{")
	s = append(s, "CommitHash: "+fmt.Sprintf("%#v", this.CommitHash)+",\n")
	s = append(s, "AuthorName: "+fmt.Sprintf("%#v", this.AuthorName)+",\n")
	s = append(s, "AuthorEmail: "+fmt.Sprintf("%#v", this.AuthorEmail)+",\n")
	s = append(s, "AuthorTime: "+fmt.Sprintf("%#v", this.AuthorTime)+",\n")
	s = append(s, "BranchLocal: "+fmt.Sprintf("%#v", this.BranchLocal)+",\n")
	s = append(s, "BranchRemote: "+fmt.Sprintf("%#v", this.BranchRemote)+",\n")
	s = append(s, "RemoteUrl: "+fmt.Sprintf("%#v", this.RemoteUrl)+",\n")
	s = append(s, "IsSigned: "+fmt.Sprintf("%#v", this.IsSigned)+",\n")
	s = append(s, "IsClean: "+fmt.Sprintf("%#v", this.IsClean)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringApi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *BuildConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Profiles) > 0 {
		for iNdEx := len(m.Profiles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Profiles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Deps != nil {
		{
			size, err := m.Deps.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OsName) > 0 {
		i -= len(m.OsName)
		copy(dAtA[i:], m.OsName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OsName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BuildProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EfiGuidToken) > 0 {
		i -= len(m.EfiGuidToken)
		copy(dAtA[i:], m.EfiGuidToken)
		i = encodeVarintApi(dAtA, i, uint64(len(m.EfiGuidToken)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.EfiGuidPackage) > 0 {
		i -= len(m.EfiGuidPackage)
		copy(dAtA[i:], m.EfiGuidPackage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.EfiGuidPackage)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.EfiGuidFile) > 0 {
		i -= len(m.EfiGuidFile)
		copy(dAtA[i:], m.EfiGuidFile)
		i = encodeVarintApi(dAtA, i, uint64(len(m.EfiGuidFile)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.EfiGuidPlatform) > 0 {
		i -= len(m.EfiGuidPlatform)
		copy(dAtA[i:], m.EfiGuidPlatform)
		i = encodeVarintApi(dAtA, i, uint64(len(m.EfiGuidPlatform)))
		i--
		dAtA[i] = 0x3a
	}
	if m.AllowUnsigned {
		i--
		if m.AllowUnsigned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.AllowUnclean {
		i--
		if m.AllowUnclean {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.BootType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BootType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Artifact) > 0 {
		i -= len(m.Artifact)
		copy(dAtA[i:], m.Artifact)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Artifact)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Arch) > 0 {
		i -= len(m.Arch)
		copy(dAtA[i:], m.Arch)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Arch)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DependencyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DependencyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DependencyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Acpica != nil {
		{
			size, err := m.Acpica.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Edk2 != nil {
		{
			size, err := m.Edk2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Edk2Configuration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Edk2Configuration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Edk2Configuration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tag) > 0 {
		i -= len(m.Tag)
		copy(dAtA[i:], m.Tag)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Tag)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GitUrl) > 0 {
		i -= len(m.GitUrl)
		copy(dAtA[i:], m.GitUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GitUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AcpicaConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcpicaConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AcpicaConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tag) > 0 {
		i -= len(m.Tag)
		copy(dAtA[i:], m.Tag)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Tag)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GitUrl) > 0 {
		i -= len(m.GitUrl)
		copy(dAtA[i:], m.GitUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GitUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BuildInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.HostArch) > 0 {
		i -= len(m.HostArch)
		copy(dAtA[i:], m.HostArch)
		i = encodeVarintApi(dAtA, i, uint64(len(m.HostArch)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.HostOs) > 0 {
		i -= len(m.HostOs)
		copy(dAtA[i:], m.HostOs)
		i = encodeVarintApi(dAtA, i, uint64(len(m.HostOs)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.GoVersionStr) > 0 {
		i -= len(m.GoVersionStr)
		copy(dAtA[i:], m.GoVersionStr)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GoVersionStr)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x42
	}
	if m.Timestamp != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x38
	}
	if m.Scm != nil {
		{
			size, err := m.Scm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0x2a
	}
	if m.RevisionNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RevisionNum))
		i--
		dAtA[i] = 0x20
	}
	if m.VersionMinorNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.VersionMinorNum))
		i--
		dAtA[i] = 0x18
	}
	if m.VersionMajorNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.VersionMajorNum))
		i--
		dAtA[i] = 0x10
	}
	if len(m.VersionStr) > 0 {
		i -= len(m.VersionStr)
		copy(dAtA[i:], m.VersionStr)
		i = encodeVarintApi(dAtA, i, uint64(len(m.VersionStr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScmSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScmSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScmSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsClean {
		i--
		if m.IsClean {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.IsSigned {
		i--
		if m.IsSigned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.RemoteUrl) > 0 {
		i -= len(m.RemoteUrl)
		copy(dAtA[i:], m.RemoteUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RemoteUrl)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.BranchRemote) > 0 {
		i -= len(m.BranchRemote)
		copy(dAtA[i:], m.BranchRemote)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BranchRemote)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BranchLocal) > 0 {
		i -= len(m.BranchLocal)
		copy(dAtA[i:], m.BranchLocal)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BranchLocal)))
		i--
		dAtA[i] = 0x2a
	}
	if m.AuthorTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AuthorTime))
		i--
		dAtA[i] = 0x20
	}
	if len(m.AuthorEmail) > 0 {
		i -= len(m.AuthorEmail)
		copy(dAtA[i:], m.AuthorEmail)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AuthorEmail)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AuthorName) > 0 {
		i -= len(m.AuthorName)
		copy(dAtA[i:], m.AuthorName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AuthorName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CommitHash) > 0 {
		i -= len(m.CommitHash)
		copy(dAtA[i:], m.CommitHash)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CommitHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BuildConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OsName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Deps != nil {
		l = m.Deps.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Profiles) > 0 {
		for _, e := range m.Profiles {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BuildProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Arch)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Artifact)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.BootType != 0 {
		n += 1 + sovApi(uint64(m.BootType))
	}
	if m.AllowUnclean {
		n += 2
	}
	if m.AllowUnsigned {
		n += 2
	}
	l = len(m.EfiGuidPlatform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.EfiGuidFile)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.EfiGuidPackage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.EfiGuidToken)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DependencyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Edk2 != nil {
		l = m.Edk2.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Acpica != nil {
		l = m.Acpica.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Edk2Configuration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GitUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AcpicaConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GitUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BuildInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VersionStr)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.VersionMajorNum != 0 {
		n += 1 + sovApi(uint64(m.VersionMajorNum))
	}
	if m.VersionMinorNum != 0 {
		n += 1 + sovApi(uint64(m.VersionMinorNum))
	}
	if m.RevisionNum != 0 {
		n += 1 + sovApi(uint64(m.RevisionNum))
	}
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Scm != nil {
		l = m.Scm.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovApi(uint64(m.Timestamp))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.GoVersionStr)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.HostOs)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.HostArch)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ScmSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CommitHash)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AuthorName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AuthorEmail)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.AuthorTime != 0 {
		n += 1 + sovApi(uint64(m.AuthorTime))
	}
	l = len(m.BranchLocal)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BranchRemote)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.RemoteUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.IsSigned {
		n += 2
	}
	if m.IsClean {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *BuildConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForProfiles := "[]*BuildProfile{"
	for _, f := range this.Profiles {
		repeatedStringForProfiles += strings.Replace(f.String(), "BuildProfile", "BuildProfile", 1) + ","
	}
	repeatedStringForProfiles += "}"
	s := strings.Join([]string{`&BuildConfiguration{`,
		`OsName:` + fmt.Sprintf("%v", this.OsName) + `,`,
		`Deps:` + strings.Replace(this.Deps.String(), "DependencyConfiguration", "DependencyConfiguration", 1) + `,`,
		`Profiles:` + repeatedStringForProfiles + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BuildProfile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BuildProfile{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Arch:` + fmt.Sprintf("%v", this.Arch) + `,`,
		`Artifact:` + fmt.Sprintf("%v", this.Artifact) + `,`,
		`BootType:` + fmt.Sprintf("%v", this.BootType) + `,`,
		`AllowUnclean:` + fmt.Sprintf("%v", this.AllowUnclean) + `,`,
		`AllowUnsigned:` + fmt.Sprintf("%v", this.AllowUnsigned) + `,`,
		`EfiGuidPlatform:` + fmt.Sprintf("%v", this.EfiGuidPlatform) + `,`,
		`EfiGuidFile:` + fmt.Sprintf("%v", this.EfiGuidFile) + `,`,
		`EfiGuidPackage:` + fmt.Sprintf("%v", this.EfiGuidPackage) + `,`,
		`EfiGuidToken:` + fmt.Sprintf("%v", this.EfiGuidToken) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DependencyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DependencyConfiguration{`,
		`Edk2:` + strings.Replace(this.Edk2.String(), "Edk2Configuration", "Edk2Configuration", 1) + `,`,
		`Acpica:` + strings.Replace(this.Acpica.String(), "AcpicaConfiguration", "AcpicaConfiguration", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Edk2Configuration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Edk2Configuration{`,
		`GitUrl:` + fmt.Sprintf("%v", this.GitUrl) + `,`,
		`Tag:` + fmt.Sprintf("%v", this.Tag) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AcpicaConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AcpicaConfiguration{`,
		`GitUrl:` + fmt.Sprintf("%v", this.GitUrl) + `,`,
		`Tag:` + fmt.Sprintf("%v", this.Tag) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BuildInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BuildInfo{`,
		`VersionStr:` + fmt.Sprintf("%v", this.VersionStr) + `,`,
		`VersionMajorNum:` + fmt.Sprintf("%v", this.VersionMajorNum) + `,`,
		`VersionMinorNum:` + fmt.Sprintf("%v", this.VersionMinorNum) + `,`,
		`RevisionNum:` + fmt.Sprintf("%v", this.RevisionNum) + `,`,
		`Uuid:` + fmt.Sprintf("%v", this.Uuid) + `,`,
		`Scm:` + strings.Replace(this.Scm.String(), "ScmSnapshot", "ScmSnapshot", 1) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`GoVersionStr:` + fmt.Sprintf("%v", this.GoVersionStr) + `,`,
		`HostOs:` + fmt.Sprintf("%v", this.HostOs) + `,`,
		`HostArch:` + fmt.Sprintf("%v", this.HostArch) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScmSnapshot) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScmSnapshot{`,
		`CommitHash:` + fmt.Sprintf("%v", this.CommitHash) + `,`,
		`AuthorName:` + fmt.Sprintf("%v", this.AuthorName) + `,`,
		`AuthorEmail:` + fmt.Sprintf("%v", this.AuthorEmail) + `,`,
		`AuthorTime:` + fmt.Sprintf("%v", this.AuthorTime) + `,`,
		`BranchLocal:` + fmt.Sprintf("%v", this.BranchLocal) + `,`,
		`BranchRemote:` + fmt.Sprintf("%v", this.BranchRemote) + `,`,
		`RemoteUrl:` + fmt.Sprintf("%v", this.RemoteUrl) + `,`,
		`IsSigned:` + fmt.Sprintf("%v", this.IsSigned) + `,`,
		`IsClean:` + fmt.Sprintf("%v", this.IsClean) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *BuildConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Deps == nil {
				m.Deps = &DependencyConfiguration{}
			}
			if err := m.Deps.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profiles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Profiles = append(m.Profiles, &BuildProfile{})
			if err := m.Profiles[len(m.Profiles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Artifact", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Artifact = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BootType", wireType)
			}
			m.BootType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BootType |= BootType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowUnclean", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowUnclean = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowUnsigned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowUnsigned = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EfiGuidPlatform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EfiGuidPlatform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EfiGuidFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EfiGuidFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EfiGuidPackage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EfiGuidPackage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EfiGuidToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EfiGuidToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DependencyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DependencyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DependencyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Edk2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Edk2 == nil {
				m.Edk2 = &Edk2Configuration{}
			}
			if err := m.Edk2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Acpica", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Acpica == nil {
				m.Acpica = &AcpicaConfiguration{}
			}
			if err := m.Acpica.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Edk2Configuration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Edk2Configuration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Edk2Configuration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GitUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GitUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcpicaConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcpicaConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcpicaConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GitUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GitUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VersionStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionMajorNum", wireType)
			}
			m.VersionMajorNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VersionMajorNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionMinorNum", wireType)
			}
			m.VersionMinorNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VersionMinorNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevisionNum", wireType)
			}
			m.RevisionNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RevisionNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scm == nil {
				m.Scm = &ScmSnapshot{}
			}
			if err := m.Scm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoVersionStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoVersionStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostOs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostOs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostArch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostArch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScmSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScmSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScmSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommitHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorEmail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorEmail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorTime", wireType)
			}
			m.AuthorTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthorTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BranchLocal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BranchLocal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BranchRemote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BranchRemote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSigned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSigned = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsClean", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsClean = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
