// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/api/os/container/bundle/v0/api.proto

package v0

import (
	v01 "alt-os/api/os/container/process/v0"
	v0 "alt-os/api/os/container/volume/v0"
	v02 "alt-os/api/os/machine/image/v0"
	bytes "bytes"
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ApiServeRequest specifies a ContainerBundleService.Serve call.
type ApiServeRequest struct {
	// The hostname for the API server to listen on.
	ApiHostname string `protobuf:"bytes,1,opt,name=api_hostname,json=apiHostname,proto3" json:"api_hostname,omitempty"`
	// The port for the API server to listen on.
	ApiPort uint32 `protobuf:"varint,2,opt,name=api_port,json=apiPort,proto3" json:"api_port,omitempty"`
	// The number of seconds to timeout the API request.
	ApiTimeout uint32 `protobuf:"varint,3,opt,name=api_timeout,json=apiTimeout,proto3" json:"api_timeout,omitempty"`
	// The path to the root directory of bundles.
	RootDir              string   `protobuf:"bytes,4,opt,name=root_dir,json=rootDir,proto3" json:"root_dir,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApiServeRequest) Reset()      { *m = ApiServeRequest{} }
func (*ApiServeRequest) ProtoMessage() {}
func (*ApiServeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3aef20909530261, []int{0}
}
func (m *ApiServeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiServeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApiServeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApiServeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiServeRequest.Merge(m, src)
}
func (m *ApiServeRequest) XXX_Size() int {
	return m.Size()
}
func (m *ApiServeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiServeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApiServeRequest proto.InternalMessageInfo

func (m *ApiServeRequest) GetApiHostname() string {
	if m != nil {
		return m.ApiHostname
	}
	return ""
}

func (m *ApiServeRequest) GetApiPort() uint32 {
	if m != nil {
		return m.ApiPort
	}
	return 0
}

func (m *ApiServeRequest) GetApiTimeout() uint32 {
	if m != nil {
		return m.ApiTimeout
	}
	return 0
}

func (m *ApiServeRequest) GetRootDir() string {
	if m != nil {
		return m.RootDir
	}
	return ""
}

// ApiUnserveRequest specifies a ContainerBundleService.Unserve call.
type ApiUnserveRequest struct {
	// The hostname of the listening API server to operate on.
	ApiHostname string `protobuf:"bytes,1,opt,name=api_hostname,json=apiHostname,proto3" json:"api_hostname,omitempty"`
	// The port of the listening API server to operate on.
	ApiPort uint32 `protobuf:"varint,2,opt,name=api_port,json=apiPort,proto3" json:"api_port,omitempty"`
	// The number of seconds to timeout the API request.
	ApiTimeout           uint32   `protobuf:"varint,3,opt,name=api_timeout,json=apiTimeout,proto3" json:"api_timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApiUnserveRequest) Reset()      { *m = ApiUnserveRequest{} }
func (*ApiUnserveRequest) ProtoMessage() {}
func (*ApiUnserveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3aef20909530261, []int{1}
}
func (m *ApiUnserveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiUnserveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApiUnserveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApiUnserveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiUnserveRequest.Merge(m, src)
}
func (m *ApiUnserveRequest) XXX_Size() int {
	return m.Size()
}
func (m *ApiUnserveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiUnserveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApiUnserveRequest proto.InternalMessageInfo

func (m *ApiUnserveRequest) GetApiHostname() string {
	if m != nil {
		return m.ApiHostname
	}
	return ""
}

func (m *ApiUnserveRequest) GetApiPort() uint32 {
	if m != nil {
		return m.ApiPort
	}
	return 0
}

func (m *ApiUnserveRequest) GetApiTimeout() uint32 {
	if m != nil {
		return m.ApiTimeout
	}
	return 0
}

// CreateRequest specifies a ContainerBundleService.Create call.
type CreateRequest struct {
	// The hostname of the listening API server to operate on.
	ApiHostname string `protobuf:"bytes,1,opt,name=api_hostname,json=apiHostname,proto3" json:"api_hostname,omitempty"`
	// The port of the listening API server to operate on.
	ApiPort uint32 `protobuf:"varint,2,opt,name=api_port,json=apiPort,proto3" json:"api_port,omitempty"`
	// The number of seconds to timeout the API request.
	ApiTimeout uint32 `protobuf:"varint,3,opt,name=api_timeout,json=apiTimeout,proto3" json:"api_timeout,omitempty"`
	// The path to a file containing serialized Bundles defining the bundle to create.
	// Not allowed if bundles is set.
	BundlesFile string `protobuf:"bytes,4,opt,name=bundles_file,json=bundlesFile,proto3" json:"bundles_file,omitempty"`
	// Objects defining the bundles to create. Not allowed if bundles_file is set.
	Bundles              []*Bundle `protobuf:"bytes,5,rep,name=bundles,proto3" json:"bundles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CreateRequest) Reset()      { *m = CreateRequest{} }
func (*CreateRequest) ProtoMessage() {}
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3aef20909530261, []int{2}
}
func (m *CreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRequest.Merge(m, src)
}
func (m *CreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRequest proto.InternalMessageInfo

func (m *CreateRequest) GetApiHostname() string {
	if m != nil {
		return m.ApiHostname
	}
	return ""
}

func (m *CreateRequest) GetApiPort() uint32 {
	if m != nil {
		return m.ApiPort
	}
	return 0
}

func (m *CreateRequest) GetApiTimeout() uint32 {
	if m != nil {
		return m.ApiTimeout
	}
	return 0
}

func (m *CreateRequest) GetBundlesFile() string {
	if m != nil {
		return m.BundlesFile
	}
	return ""
}

func (m *CreateRequest) GetBundles() []*Bundle {
	if m != nil {
		return m.Bundles
	}
	return nil
}

// Bundle defines a container bundle.
type Bundle struct {
	// The name of the subdirectory of the bundle within the service's bundle root directory.
	BundleDir string `protobuf:"bytes,1,opt,name=bundle_dir,json=bundleDir,proto3" json:"bundle_dir,omitempty"`
	// The hostname of the container as seen from within it.
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Volumes to mount for the container.
	VolumeMounts []*v0.ContainerVolume `protobuf:"bytes,3,rep,name=volume_mounts,json=volumeMounts,proto3" json:"volume_mounts,omitempty"`
	// The container process definition.
	Process *v01.ContainerProcess `protobuf:"bytes,4,opt,name=process,proto3" json:"process,omitempty"`
	// Settings object for a virtual machine that can host the container.
	// Not allowed if virtual_machine_file is also specified.
	VirtualMachine *v02.VirtualMachine `protobuf:"bytes,5,opt,name=virtual_machine,json=virtualMachine,proto3" json:"virtual_machine,omitempty"`
	// File storing a serialized settings object for a virtual machine
	// that can host the container. Not allowed if virtual_machine is
	// also specified.
	VirtualMachineFile   string   `protobuf:"bytes,6,opt,name=virtual_machine_file,json=virtualMachineFile,proto3" json:"virtual_machine_file,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Bundle) Reset()      { *m = Bundle{} }
func (*Bundle) ProtoMessage() {}
func (*Bundle) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3aef20909530261, []int{3}
}
func (m *Bundle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bundle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bundle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bundle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bundle.Merge(m, src)
}
func (m *Bundle) XXX_Size() int {
	return m.Size()
}
func (m *Bundle) XXX_DiscardUnknown() {
	xxx_messageInfo_Bundle.DiscardUnknown(m)
}

var xxx_messageInfo_Bundle proto.InternalMessageInfo

func (m *Bundle) GetBundleDir() string {
	if m != nil {
		return m.BundleDir
	}
	return ""
}

func (m *Bundle) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Bundle) GetVolumeMounts() []*v0.ContainerVolume {
	if m != nil {
		return m.VolumeMounts
	}
	return nil
}

func (m *Bundle) GetProcess() *v01.ContainerProcess {
	if m != nil {
		return m.Process
	}
	return nil
}

func (m *Bundle) GetVirtualMachine() *v02.VirtualMachine {
	if m != nil {
		return m.VirtualMachine
	}
	return nil
}

func (m *Bundle) GetVirtualMachineFile() string {
	if m != nil {
		return m.VirtualMachineFile
	}
	return ""
}

func init() {
	proto.RegisterType((*ApiServeRequest)(nil), "os.container.bundle.ApiServeRequest")
	proto.RegisterType((*ApiUnserveRequest)(nil), "os.container.bundle.ApiUnserveRequest")
	proto.RegisterType((*CreateRequest)(nil), "os.container.bundle.CreateRequest")
	proto.RegisterType((*Bundle)(nil), "os.container.bundle.Bundle")
}

func init() {
	proto.RegisterFile("pkg/api/os/container/bundle/v0/api.proto", fileDescriptor_b3aef20909530261)
}

var fileDescriptor_b3aef20909530261 = []byte{
	// 578 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xee, 0x25, 0x34, 0x49, 0x5f, 0x12, 0x2a, 0x8e, 0xaa, 0x32, 0xa9, 0x6a, 0x12, 0xab, 0xaa,
	0xb2, 0x60, 0x57, 0x41, 0xec, 0xb4, 0x29, 0x15, 0x45, 0x2a, 0xaa, 0x0c, 0x74, 0x60, 0xb1, 0x2e,
	0xe9, 0xd5, 0x3d, 0x61, 0xfb, 0x8e, 0xf3, 0x39, 0x12, 0x1b, 0x3b, 0x7f, 0x84, 0x9f, 0xd2, 0x05,
	0x89, 0x91, 0x91, 0xe4, 0x17, 0x30, 0x32, 0x30, 0x20, 0xdf, 0x39, 0xa9, 0x5c, 0xa5, 0x1d, 0x3b,
	0x25, 0xef, 0x7b, 0xdf, 0x7d, 0xf7, 0xde, 0xbb, 0xef, 0x19, 0xfa, 0xe2, 0x53, 0xe8, 0x11, 0xc1,
	0x3c, 0x9e, 0x7a, 0x63, 0x9e, 0x28, 0xc2, 0x12, 0x2a, 0xbd, 0x51, 0x96, 0x9c, 0x47, 0xd4, 0x9b,
	0xec, 0xe5, 0x29, 0x57, 0x48, 0xae, 0x38, 0x7e, 0xcc, 0x53, 0x77, 0xc1, 0x70, 0x0d, 0xa3, 0xb3,
	0x11, 0xf2, 0x90, 0xeb, 0xbc, 0x97, 0xff, 0x33, 0xd4, 0xce, 0x56, 0xc8, 0x79, 0x18, 0x51, 0x4f,
	0x47, 0xa3, 0xec, 0xc2, 0xa3, 0xb1, 0x50, 0x5f, 0x8a, 0x64, 0xb7, 0x74, 0xd3, 0x84, 0x47, 0x59,
	0x5c, 0xbe, 0xa9, 0xd3, 0x2b, 0x31, 0x84, 0xe4, 0x63, 0x9a, 0xa6, 0x65, 0xca, 0x36, 0x4f, 0xbd,
	0x98, 0x8c, 0x2f, 0x59, 0x42, 0x3d, 0x16, 0x93, 0xb0, 0xac, 0xe0, 0x7c, 0x43, 0xb0, 0xbe, 0x2f,
	0xd8, 0x3b, 0x2a, 0x27, 0xd4, 0xa7, 0x9f, 0x33, 0x9a, 0x2a, 0xdc, 0x83, 0x16, 0x11, 0x2c, 0xb8,
	0xe4, 0xa9, 0x4a, 0x48, 0x4c, 0x2d, 0xd4, 0x45, 0xfd, 0x35, 0xbf, 0x49, 0x04, 0x7b, 0x5d, 0x40,
	0xf8, 0x09, 0x34, 0x72, 0x8a, 0xe0, 0x52, 0x59, 0x95, 0x2e, 0xea, 0xb7, 0xfd, 0x3a, 0x11, 0xec,
	0x94, 0x4b, 0x85, 0x9f, 0x42, 0xce, 0x0c, 0x14, 0x8b, 0x29, 0xcf, 0x94, 0x55, 0xd5, 0x59, 0x20,
	0x82, 0xbd, 0x37, 0x48, 0x7e, 0x56, 0x72, 0xae, 0x82, 0x73, 0x26, 0xad, 0x07, 0x5a, 0xba, 0x9e,
	0xc7, 0x87, 0x4c, 0x3a, 0x12, 0x1e, 0xed, 0x0b, 0xf6, 0x21, 0x49, 0xef, 0xaf, 0x1c, 0xe7, 0x0a,
	0x41, 0x7b, 0x28, 0x29, 0x51, 0xf7, 0xd5, 0x7f, 0x0f, 0x5a, 0xc6, 0x13, 0x69, 0x70, 0xc1, 0x22,
	0x5a, 0xcc, 0xa0, 0x59, 0x60, 0x47, 0x2c, 0xa2, 0xf8, 0x05, 0xd4, 0x8b, 0xd0, 0x5a, 0xed, 0x56,
	0xfb, 0xcd, 0xc1, 0x96, 0xbb, 0xc4, 0x53, 0xee, 0x81, 0xfe, 0xf1, 0xe7, 0x5c, 0xe7, 0x47, 0x05,
	0x6a, 0x06, 0xc3, 0xdb, 0x00, 0x06, 0xd5, 0x63, 0x36, 0x1d, 0xac, 0x19, 0xe4, 0x90, 0x49, 0xdc,
	0x81, 0xc6, 0xa2, 0xbd, 0x8a, 0x4e, 0x2e, 0x62, 0x7c, 0x0c, 0x6d, 0xe3, 0xb5, 0x20, 0xe6, 0x59,
	0xa2, 0x52, 0xab, 0xaa, 0x4b, 0xd8, 0x29, 0x97, 0x60, 0x28, 0xee, 0x70, 0x0e, 0x9c, 0xe9, 0xd8,
	0x6f, 0x19, 0xfc, 0x44, 0x9f, 0xc4, 0x2f, 0xa1, 0x5e, 0x98, 0x52, 0x77, 0xd9, 0x1c, 0xec, 0x96,
	0x45, 0x8a, 0xe4, 0xb5, 0xca, 0xa9, 0x01, 0xfc, 0xf9, 0x31, 0x7c, 0x0c, 0xeb, 0x13, 0x26, 0x55,
	0x46, 0xa2, 0xa0, 0x70, 0xb1, 0xb5, 0xaa, 0x95, 0xba, 0xb9, 0x52, 0x01, 0xb9, 0xda, 0xd8, 0xee,
	0x99, 0x21, 0x9e, 0x18, 0xd0, 0x7f, 0x38, 0x29, 0xc5, 0x78, 0x0f, 0x36, 0x6e, 0x48, 0x99, 0xf9,
	0xd7, 0x74, 0xff, 0xb8, 0xcc, 0xce, 0x9f, 0x61, 0xf0, 0x0f, 0xc1, 0xe6, 0xa2, 0x34, 0x33, 0xd8,
	0x7c, 0x51, 0xd8, 0x98, 0xe2, 0x37, 0xd0, 0x98, 0xaf, 0x0d, 0xde, 0x59, 0xfa, 0x38, 0x37, 0xb6,
	0xaa, 0xb3, 0xe9, 0x9a, 0x5d, 0x77, 0xe7, 0xbb, 0xee, 0xbe, 0xca, 0x77, 0xdd, 0x59, 0xc1, 0x6f,
	0x01, 0xae, 0x5d, 0x8f, 0x77, 0x6f, 0x53, 0x2b, 0xaf, 0xc5, 0x1d, 0x7a, 0x47, 0x50, 0x33, 0x86,
	0xc6, 0xce, 0x52, 0xad, 0x92, 0xdb, 0x6f, 0xd7, 0x39, 0x18, 0xfe, 0x9a, 0xda, 0x2b, 0x7f, 0xa6,
	0x36, 0xfa, 0x3b, 0xb5, 0x57, 0xbe, 0xce, 0x6c, 0xf4, 0x7d, 0x66, 0xa3, 0xab, 0x99, 0x8d, 0x7e,
	0xce, 0x6c, 0xf4, 0x7b, 0x66, 0xa3, 0x8f, 0x3d, 0x12, 0xa9, 0x67, 0x3c, 0xbd, 0xe3, 0xb3, 0x38,
	0xaa, 0x69, 0xd9, 0xe7, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x86, 0x59, 0xa6, 0xd6, 0x3f, 0x05,
	0x00, 0x00,
}

func (this *ApiServeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiServeRequest)
	if !ok {
		that2, ok := that.(ApiServeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ApiHostname != that1.ApiHostname {
		return false
	}
	if this.ApiPort != that1.ApiPort {
		return false
	}
	if this.ApiTimeout != that1.ApiTimeout {
		return false
	}
	if this.RootDir != that1.RootDir {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ApiUnserveRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiUnserveRequest)
	if !ok {
		that2, ok := that.(ApiUnserveRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ApiHostname != that1.ApiHostname {
		return false
	}
	if this.ApiPort != that1.ApiPort {
		return false
	}
	if this.ApiTimeout != that1.ApiTimeout {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CreateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateRequest)
	if !ok {
		that2, ok := that.(CreateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ApiHostname != that1.ApiHostname {
		return false
	}
	if this.ApiPort != that1.ApiPort {
		return false
	}
	if this.ApiTimeout != that1.ApiTimeout {
		return false
	}
	if this.BundlesFile != that1.BundlesFile {
		return false
	}
	if len(this.Bundles) != len(that1.Bundles) {
		return false
	}
	for i := range this.Bundles {
		if !this.Bundles[i].Equal(that1.Bundles[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Bundle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bundle)
	if !ok {
		that2, ok := that.(Bundle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BundleDir != that1.BundleDir {
		return false
	}
	if this.Hostname != that1.Hostname {
		return false
	}
	if len(this.VolumeMounts) != len(that1.VolumeMounts) {
		return false
	}
	for i := range this.VolumeMounts {
		if !this.VolumeMounts[i].Equal(that1.VolumeMounts[i]) {
			return false
		}
	}
	if !this.Process.Equal(that1.Process) {
		return false
	}
	if !this.VirtualMachine.Equal(that1.VirtualMachine) {
		return false
	}
	if this.VirtualMachineFile != that1.VirtualMachineFile {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ApiServeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&v0.ApiServeRequest{")
	s = append(s, "ApiHostname: "+fmt.Sprintf("%#v", this.ApiHostname)+",\n")
	s = append(s, "ApiPort: "+fmt.Sprintf("%#v", this.ApiPort)+",\n")
	s = append(s, "ApiTimeout: "+fmt.Sprintf("%#v", this.ApiTimeout)+",\n")
	s = append(s, "RootDir: "+fmt.Sprintf("%#v", this.RootDir)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApiUnserveRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&v0.ApiUnserveRequest{")
	s = append(s, "ApiHostname: "+fmt.Sprintf("%#v", this.ApiHostname)+",\n")
	s = append(s, "ApiPort: "+fmt.Sprintf("%#v", this.ApiPort)+",\n")
	s = append(s, "ApiTimeout: "+fmt.Sprintf("%#v", this.ApiTimeout)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&v0.CreateRequest{")
	s = append(s, "ApiHostname: "+fmt.Sprintf("%#v", this.ApiHostname)+",\n")
	s = append(s, "ApiPort: "+fmt.Sprintf("%#v", this.ApiPort)+",\n")
	s = append(s, "ApiTimeout: "+fmt.Sprintf("%#v", this.ApiTimeout)+",\n")
	s = append(s, "BundlesFile: "+fmt.Sprintf("%#v", this.BundlesFile)+",\n")
	if this.Bundles != nil {
		s = append(s, "Bundles: "+fmt.Sprintf("%#v", this.Bundles)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Bundle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&v0.Bundle{")
	s = append(s, "BundleDir: "+fmt.Sprintf("%#v", this.BundleDir)+",\n")
	s = append(s, "Hostname: "+fmt.Sprintf("%#v", this.Hostname)+",\n")
	if this.VolumeMounts != nil {
		s = append(s, "VolumeMounts: "+fmt.Sprintf("%#v", this.VolumeMounts)+",\n")
	}
	if this.Process != nil {
		s = append(s, "Process: "+fmt.Sprintf("%#v", this.Process)+",\n")
	}
	if this.VirtualMachine != nil {
		s = append(s, "VirtualMachine: "+fmt.Sprintf("%#v", this.VirtualMachine)+",\n")
	}
	s = append(s, "VirtualMachineFile: "+fmt.Sprintf("%#v", this.VirtualMachineFile)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringApi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ContainerBundleServiceClient is the client API for ContainerBundleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ContainerBundleServiceClient interface {
	// ApiServe enables the container bundle service api according to the given configuration.
	ApiServe(ctx context.Context, in *ApiServeRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// ApiUnserve disables the container bundle service api.
	ApiUnserve(ctx context.Context, in *ApiUnserveRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// Create generates a new bundle in a subdirectory of the bundle service root directory.
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type containerBundleServiceClient struct {
	cc *grpc.ClientConn
}

func NewContainerBundleServiceClient(cc *grpc.ClientConn) ContainerBundleServiceClient {
	return &containerBundleServiceClient{cc}
}

func (c *containerBundleServiceClient) ApiServe(ctx context.Context, in *ApiServeRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/os.container.bundle.ContainerBundleService/ApiServe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerBundleServiceClient) ApiUnserve(ctx context.Context, in *ApiUnserveRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/os.container.bundle.ContainerBundleService/ApiUnserve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerBundleServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/os.container.bundle.ContainerBundleService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContainerBundleServiceServer is the server API for ContainerBundleService service.
type ContainerBundleServiceServer interface {
	// ApiServe enables the container bundle service api according to the given configuration.
	ApiServe(context.Context, *ApiServeRequest) (*types.Empty, error)
	// ApiUnserve disables the container bundle service api.
	ApiUnserve(context.Context, *ApiUnserveRequest) (*types.Empty, error)
	// Create generates a new bundle in a subdirectory of the bundle service root directory.
	Create(context.Context, *CreateRequest) (*types.Empty, error)
}

// UnimplementedContainerBundleServiceServer can be embedded to have forward compatible implementations.
type UnimplementedContainerBundleServiceServer struct {
}

func (*UnimplementedContainerBundleServiceServer) ApiServe(ctx context.Context, req *ApiServeRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiServe not implemented")
}
func (*UnimplementedContainerBundleServiceServer) ApiUnserve(ctx context.Context, req *ApiUnserveRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiUnserve not implemented")
}
func (*UnimplementedContainerBundleServiceServer) Create(ctx context.Context, req *CreateRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}

func RegisterContainerBundleServiceServer(s *grpc.Server, srv ContainerBundleServiceServer) {
	s.RegisterService(&_ContainerBundleService_serviceDesc, srv)
}

func _ContainerBundleService_ApiServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiServeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerBundleServiceServer).ApiServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/os.container.bundle.ContainerBundleService/ApiServe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerBundleServiceServer).ApiServe(ctx, req.(*ApiServeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerBundleService_ApiUnserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiUnserveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerBundleServiceServer).ApiUnserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/os.container.bundle.ContainerBundleService/ApiUnserve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerBundleServiceServer).ApiUnserve(ctx, req.(*ApiUnserveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerBundleService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerBundleServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/os.container.bundle.ContainerBundleService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerBundleServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ContainerBundleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "os.container.bundle.ContainerBundleService",
	HandlerType: (*ContainerBundleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApiServe",
			Handler:    _ContainerBundleService_ApiServe_Handler,
		},
		{
			MethodName: "ApiUnserve",
			Handler:    _ContainerBundleService_ApiUnserve_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ContainerBundleService_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/os/container/bundle/v0/api.proto",
}

func (m *ApiServeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiServeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiServeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RootDir) > 0 {
		i -= len(m.RootDir)
		copy(dAtA[i:], m.RootDir)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RootDir)))
		i--
		dAtA[i] = 0x22
	}
	if m.ApiTimeout != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ApiTimeout))
		i--
		dAtA[i] = 0x18
	}
	if m.ApiPort != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ApiPort))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ApiHostname) > 0 {
		i -= len(m.ApiHostname)
		copy(dAtA[i:], m.ApiHostname)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ApiHostname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApiUnserveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiUnserveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiUnserveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ApiTimeout != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ApiTimeout))
		i--
		dAtA[i] = 0x18
	}
	if m.ApiPort != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ApiPort))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ApiHostname) > 0 {
		i -= len(m.ApiHostname)
		copy(dAtA[i:], m.ApiHostname)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ApiHostname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Bundles) > 0 {
		for iNdEx := len(m.Bundles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bundles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.BundlesFile) > 0 {
		i -= len(m.BundlesFile)
		copy(dAtA[i:], m.BundlesFile)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BundlesFile)))
		i--
		dAtA[i] = 0x22
	}
	if m.ApiTimeout != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ApiTimeout))
		i--
		dAtA[i] = 0x18
	}
	if m.ApiPort != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ApiPort))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ApiHostname) > 0 {
		i -= len(m.ApiHostname)
		copy(dAtA[i:], m.ApiHostname)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ApiHostname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Bundle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bundle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bundle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.VirtualMachineFile) > 0 {
		i -= len(m.VirtualMachineFile)
		copy(dAtA[i:], m.VirtualMachineFile)
		i = encodeVarintApi(dAtA, i, uint64(len(m.VirtualMachineFile)))
		i--
		dAtA[i] = 0x32
	}
	if m.VirtualMachine != nil {
		{
			size, err := m.VirtualMachine.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Process != nil {
		{
			size, err := m.Process.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.VolumeMounts) > 0 {
		for iNdEx := len(m.VolumeMounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VolumeMounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Hostname) > 0 {
		i -= len(m.Hostname)
		copy(dAtA[i:], m.Hostname)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Hostname)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BundleDir) > 0 {
		i -= len(m.BundleDir)
		copy(dAtA[i:], m.BundleDir)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BundleDir)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ApiServeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApiHostname)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ApiPort != 0 {
		n += 1 + sovApi(uint64(m.ApiPort))
	}
	if m.ApiTimeout != 0 {
		n += 1 + sovApi(uint64(m.ApiTimeout))
	}
	l = len(m.RootDir)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApiUnserveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApiHostname)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ApiPort != 0 {
		n += 1 + sovApi(uint64(m.ApiPort))
	}
	if m.ApiTimeout != 0 {
		n += 1 + sovApi(uint64(m.ApiTimeout))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApiHostname)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ApiPort != 0 {
		n += 1 + sovApi(uint64(m.ApiPort))
	}
	if m.ApiTimeout != 0 {
		n += 1 + sovApi(uint64(m.ApiTimeout))
	}
	l = len(m.BundlesFile)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Bundles) > 0 {
		for _, e := range m.Bundles {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Bundle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BundleDir)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.VolumeMounts) > 0 {
		for _, e := range m.VolumeMounts {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Process != nil {
		l = m.Process.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.VirtualMachine != nil {
		l = m.VirtualMachine.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.VirtualMachineFile)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ApiServeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiServeRequest{`,
		`ApiHostname:` + fmt.Sprintf("%v", this.ApiHostname) + `,`,
		`ApiPort:` + fmt.Sprintf("%v", this.ApiPort) + `,`,
		`ApiTimeout:` + fmt.Sprintf("%v", this.ApiTimeout) + `,`,
		`RootDir:` + fmt.Sprintf("%v", this.RootDir) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiUnserveRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiUnserveRequest{`,
		`ApiHostname:` + fmt.Sprintf("%v", this.ApiHostname) + `,`,
		`ApiPort:` + fmt.Sprintf("%v", this.ApiPort) + `,`,
		`ApiTimeout:` + fmt.Sprintf("%v", this.ApiTimeout) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForBundles := "[]*Bundle{"
	for _, f := range this.Bundles {
		repeatedStringForBundles += strings.Replace(f.String(), "Bundle", "Bundle", 1) + ","
	}
	repeatedStringForBundles += "}"
	s := strings.Join([]string{`&CreateRequest{`,
		`ApiHostname:` + fmt.Sprintf("%v", this.ApiHostname) + `,`,
		`ApiPort:` + fmt.Sprintf("%v", this.ApiPort) + `,`,
		`ApiTimeout:` + fmt.Sprintf("%v", this.ApiTimeout) + `,`,
		`BundlesFile:` + fmt.Sprintf("%v", this.BundlesFile) + `,`,
		`Bundles:` + repeatedStringForBundles + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Bundle) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForVolumeMounts := "[]*ContainerVolume{"
	for _, f := range this.VolumeMounts {
		repeatedStringForVolumeMounts += strings.Replace(fmt.Sprintf("%v", f), "ContainerVolume", "v0.ContainerVolume", 1) + ","
	}
	repeatedStringForVolumeMounts += "}"
	s := strings.Join([]string{`&Bundle{`,
		`BundleDir:` + fmt.Sprintf("%v", this.BundleDir) + `,`,
		`Hostname:` + fmt.Sprintf("%v", this.Hostname) + `,`,
		`VolumeMounts:` + repeatedStringForVolumeMounts + `,`,
		`Process:` + strings.Replace(fmt.Sprintf("%v", this.Process), "ContainerProcess", "v01.ContainerProcess", 1) + `,`,
		`VirtualMachine:` + strings.Replace(fmt.Sprintf("%v", this.VirtualMachine), "VirtualMachine", "v02.VirtualMachine", 1) + `,`,
		`VirtualMachineFile:` + fmt.Sprintf("%v", this.VirtualMachineFile) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ApiServeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiServeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiServeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiHostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiHostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiPort", wireType)
			}
			m.ApiPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiTimeout", wireType)
			}
			m.ApiTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootDir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiUnserveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiUnserveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiUnserveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiHostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiHostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiPort", wireType)
			}
			m.ApiPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiTimeout", wireType)
			}
			m.ApiTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiHostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiHostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiPort", wireType)
			}
			m.ApiPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiTimeout", wireType)
			}
			m.ApiTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundlesFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BundlesFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bundles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bundles = append(m.Bundles, &Bundle{})
			if err := m.Bundles[len(m.Bundles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bundle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bundle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bundle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BundleDir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeMounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolumeMounts = append(m.VolumeMounts, &v0.ContainerVolume{})
			if err := m.VolumeMounts[len(m.VolumeMounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Process", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Process == nil {
				m.Process = &v01.ContainerProcess{}
			}
			if err := m.Process.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualMachine", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VirtualMachine == nil {
				m.VirtualMachine = &v02.VirtualMachine{}
			}
			if err := m.VirtualMachine.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualMachineFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualMachineFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
