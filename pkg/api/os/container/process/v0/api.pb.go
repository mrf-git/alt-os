// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/api/os/container/process/v0/api.proto

package v0

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ResourceLimitType represents a type of resource limit available for processes.
type ResourceLimitType int32

const (
	// Represents a null resource limit type.
	ResourceLimitType_RLIMIT_NONE ResourceLimitType = 0
	// Size of the process's virtual address space.
	ResourceLimitType_RLIMIT_AS ResourceLimitType = 1
	// Number of seconds that the process is allowed to run on the cpu.
	ResourceLimitType_RLIMIT_CPU ResourceLimitType = 2
	// Size of the data segment in memory. Specified in bytes and rounded down to system page size.
	ResourceLimitType_RLIMIT_DATA ResourceLimitType = 3
	// Size of files the process may create.
	ResourceLimitType_RLIMIT_FSIZE ResourceLimitType = 4
	// Size of memory that can be locked by a process. Specified in bytes and rounded down to system page size.
	ResourceLimitType_RLIMIT_MEMLOCK ResourceLimitType = 5
	// Number of bytes allowed in process message queues.
	ResourceLimitType_RLIMIT_MSGQUEUE ResourceLimitType = 6
	// Number of files the process simultaneously have open.
	ResourceLimitType_RLIMIT_NOFILE ResourceLimitType = 7
	// Number of process threads a process may simultaneously be running, including itself and all child processes.
	ResourceLimitType_RLIMIT_NPROC ResourceLimitType = 8
	// Amount of time in microseconds a real-time-scheduled process can run without blocking.
	ResourceLimitType_RLIMIT_RTTIME ResourceLimitType = 9
	// Number of signals that can be queued for the process.
	ResourceLimitType_RLIMIT_SIGPENDING ResourceLimitType = 10
	// Size in bytes of the process stack.
	ResourceLimitType_RLIMIT_STACK ResourceLimitType = 11
)

var ResourceLimitType_name = map[int32]string{
	0:  "RLIMIT_NONE",
	1:  "RLIMIT_AS",
	2:  "RLIMIT_CPU",
	3:  "RLIMIT_DATA",
	4:  "RLIMIT_FSIZE",
	5:  "RLIMIT_MEMLOCK",
	6:  "RLIMIT_MSGQUEUE",
	7:  "RLIMIT_NOFILE",
	8:  "RLIMIT_NPROC",
	9:  "RLIMIT_RTTIME",
	10: "RLIMIT_SIGPENDING",
	11: "RLIMIT_STACK",
}

var ResourceLimitType_value = map[string]int32{
	"RLIMIT_NONE":       0,
	"RLIMIT_AS":         1,
	"RLIMIT_CPU":        2,
	"RLIMIT_DATA":       3,
	"RLIMIT_FSIZE":      4,
	"RLIMIT_MEMLOCK":    5,
	"RLIMIT_MSGQUEUE":   6,
	"RLIMIT_NOFILE":     7,
	"RLIMIT_NPROC":      8,
	"RLIMIT_RTTIME":     9,
	"RLIMIT_SIGPENDING": 10,
	"RLIMIT_STACK":      11,
}

func (x ResourceLimitType) String() string {
	return proto.EnumName(ResourceLimitType_name, int32(x))
}

func (ResourceLimitType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2bc9eca0068b2381, []int{0}
}

// Capability represents an individual privileged capability of a process thread.
type Capability int32

const (
	// Represents a null process capability.
	Capability_CAP_NONE Capability = 0
	// Block system suspend.
	Capability_CAP_BLOCK_SUSPEND Capability = 1
	// Lock memory and allocate huge pages.
	Capability_CAP_IPC_LOCK Capability = 2
	// Perform network administration.
	Capability_CAP_NET_ADMIN Capability = 3
	// Use performance monitoring features.
	Capability_CAP_PERFMON Capability = 4
	// Load/unload low-level system components and use low-level system features.
	Capability_CAP_SYS_ADMIN Capability = 5
	// System boot and reboot.
	Capability_CAP_SYS_BOOT Capability = 6
	// Access I/O port operations, device MSRs, and device-specific I/O features.
	Capability_CAP_SYS_RAWIO Capability = 7
	// Modify the system and clocks.
	Capability_CAP_SYS_TIME Capability = 8
)

var Capability_name = map[int32]string{
	0: "CAP_NONE",
	1: "CAP_BLOCK_SUSPEND",
	2: "CAP_IPC_LOCK",
	3: "CAP_NET_ADMIN",
	4: "CAP_PERFMON",
	5: "CAP_SYS_ADMIN",
	6: "CAP_SYS_BOOT",
	7: "CAP_SYS_RAWIO",
	8: "CAP_SYS_TIME",
}

var Capability_value = map[string]int32{
	"CAP_NONE":          0,
	"CAP_BLOCK_SUSPEND": 1,
	"CAP_IPC_LOCK":      2,
	"CAP_NET_ADMIN":     3,
	"CAP_PERFMON":       4,
	"CAP_SYS_ADMIN":     5,
	"CAP_SYS_BOOT":      6,
	"CAP_SYS_RAWIO":     7,
	"CAP_SYS_TIME":      8,
}

func (x Capability) String() string {
	return proto.EnumName(Capability_name, int32(x))
}

func (Capability) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2bc9eca0068b2381, []int{1}
}

// ContainerProcess defines the container process.
type ContainerProcess struct {
	// Terminal options for the process.
	Terminal *Terminal `protobuf:"bytes,1,opt,name=terminal,proto3" json:"terminal,omitempty"`
	// The absolute path in the container of the working directory for the process.
	Cwd string `protobuf:"bytes,2,opt,name=cwd,proto3" json:"cwd,omitempty"`
	// The environment variables to define for the process.
	Env []*EnvironmentVariable `protobuf:"bytes,3,rep,name=env,proto3" json:"env,omitempty"`
	// Arguments for executing the process.
	Args []string `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty"`
	// The resource limits for the process. Any undefined limit types will default to hard and
	// soft values of 0, effectively disabling the resource.
	Rlimits []*ResourceLimit `protobuf:"bytes,5,rep,name=rlimits,proto3" json:"rlimits,omitempty"`
	// The capability set of the container process.
	Capabilities *Capabilities `protobuf:"bytes,6,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
	// The user for the container process to run as.
	User                 *User    `protobuf:"bytes,7,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContainerProcess) Reset()      { *m = ContainerProcess{} }
func (*ContainerProcess) ProtoMessage() {}
func (*ContainerProcess) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc9eca0068b2381, []int{0}
}
func (m *ContainerProcess) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerProcess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerProcess.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerProcess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerProcess.Merge(m, src)
}
func (m *ContainerProcess) XXX_Size() int {
	return m.Size()
}
func (m *ContainerProcess) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerProcess.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerProcess proto.InternalMessageInfo

func (m *ContainerProcess) GetTerminal() *Terminal {
	if m != nil {
		return m.Terminal
	}
	return nil
}

func (m *ContainerProcess) GetCwd() string {
	if m != nil {
		return m.Cwd
	}
	return ""
}

func (m *ContainerProcess) GetEnv() []*EnvironmentVariable {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *ContainerProcess) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *ContainerProcess) GetRlimits() []*ResourceLimit {
	if m != nil {
		return m.Rlimits
	}
	return nil
}

func (m *ContainerProcess) GetCapabilities() *Capabilities {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

func (m *ContainerProcess) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

// Terminal defines terminal options for a process.
type Terminal struct {
	// Whether to attach a terminal with command-line I/O.
	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// The height of the console if a terminal is enabled.
	Height uint32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	// The width of the console if a terminal is enabled.
	Width                uint32   `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Terminal) Reset()      { *m = Terminal{} }
func (*Terminal) ProtoMessage() {}
func (*Terminal) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc9eca0068b2381, []int{1}
}
func (m *Terminal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Terminal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Terminal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Terminal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Terminal.Merge(m, src)
}
func (m *Terminal) XXX_Size() int {
	return m.Size()
}
func (m *Terminal) XXX_DiscardUnknown() {
	xxx_messageInfo_Terminal.DiscardUnknown(m)
}

var xxx_messageInfo_Terminal proto.InternalMessageInfo

func (m *Terminal) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *Terminal) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Terminal) GetWidth() uint32 {
	if m != nil {
		return m.Width
	}
	return 0
}

// EnvironmentVariable defines an environment variable for a process.
type EnvironmentVariable struct {
	// The name of the variable.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The string value of the variable.
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnvironmentVariable) Reset()      { *m = EnvironmentVariable{} }
func (*EnvironmentVariable) ProtoMessage() {}
func (*EnvironmentVariable) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc9eca0068b2381, []int{2}
}
func (m *EnvironmentVariable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnvironmentVariable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnvironmentVariable.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnvironmentVariable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnvironmentVariable.Merge(m, src)
}
func (m *EnvironmentVariable) XXX_Size() int {
	return m.Size()
}
func (m *EnvironmentVariable) XXX_DiscardUnknown() {
	xxx_messageInfo_EnvironmentVariable.DiscardUnknown(m)
}

var xxx_messageInfo_EnvironmentVariable proto.InternalMessageInfo

func (m *EnvironmentVariable) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EnvironmentVariable) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// ResourceLimit defines a limit for a process resource.
type ResourceLimit struct {
	// The type of the resource to limit.
	Type ResourceLimitType `protobuf:"varint,1,opt,name=type,proto3,enum=os.container.process.ResourceLimitType" json:"type,omitempty"`
	// The soft limit value enforced by the container runtime.
	SoftValue uint64 `protobuf:"varint,2,opt,name=soft_value,json=softValue,proto3" json:"soft_value,omitempty"`
	// Whether the soft limit is unlimited. If true any limit value is ignored.
	SoftUnlimited bool `protobuf:"varint,3,opt,name=soft_unlimited,json=softUnlimited,proto3" json:"soft_unlimited,omitempty"`
	// The hard limit value that will not be exceeded by the runtime.
	HardValue uint64 `protobuf:"varint,4,opt,name=hard_value,json=hardValue,proto3" json:"hard_value,omitempty"`
	// Whether the hard limit is unlimited. If true any limit value is ignored.
	HardUnlimited        bool     `protobuf:"varint,5,opt,name=hard_unlimited,json=hardUnlimited,proto3" json:"hard_unlimited,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResourceLimit) Reset()      { *m = ResourceLimit{} }
func (*ResourceLimit) ProtoMessage() {}
func (*ResourceLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc9eca0068b2381, []int{3}
}
func (m *ResourceLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceLimit.Merge(m, src)
}
func (m *ResourceLimit) XXX_Size() int {
	return m.Size()
}
func (m *ResourceLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceLimit.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceLimit proto.InternalMessageInfo

func (m *ResourceLimit) GetType() ResourceLimitType {
	if m != nil {
		return m.Type
	}
	return ResourceLimitType_RLIMIT_NONE
}

func (m *ResourceLimit) GetSoftValue() uint64 {
	if m != nil {
		return m.SoftValue
	}
	return 0
}

func (m *ResourceLimit) GetSoftUnlimited() bool {
	if m != nil {
		return m.SoftUnlimited
	}
	return false
}

func (m *ResourceLimit) GetHardValue() uint64 {
	if m != nil {
		return m.HardValue
	}
	return 0
}

func (m *ResourceLimit) GetHardUnlimited() bool {
	if m != nil {
		return m.HardUnlimited
	}
	return false
}

// Capabilities represents the capability set of a process thread.
type Capabilities struct {
	// Limiting superset for effective capabilities.
	Permitted []Capability `protobuf:"varint,1,rep,packed,name=permitted,proto3,enum=os.container.process.Capability" json:"permitted,omitempty"`
	// Used to perform permission checks for the process thread.
	Effective []Capability `protobuf:"varint,2,rep,packed,name=effective,proto3,enum=os.container.process.Capability" json:"effective,omitempty"`
	// Capabilities allowed to be inherited by child process threads.
	Inheritable []Capability `protobuf:"varint,3,rep,packed,name=inheritable,proto3,enum=os.container.process.Capability" json:"inheritable,omitempty"`
	// Capabilities allowed to be gained from parent process threads.
	Bounding []Capability `protobuf:"varint,4,rep,packed,name=bounding,proto3,enum=os.container.process.Capability" json:"bounding,omitempty"`
	// Capabilities always preserved across child processes.
	Ambient              []Capability `protobuf:"varint,5,rep,packed,name=ambient,proto3,enum=os.container.process.Capability" json:"ambient,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Capabilities) Reset()      { *m = Capabilities{} }
func (*Capabilities) ProtoMessage() {}
func (*Capabilities) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc9eca0068b2381, []int{4}
}
func (m *Capabilities) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Capabilities) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Capabilities.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Capabilities) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Capabilities.Merge(m, src)
}
func (m *Capabilities) XXX_Size() int {
	return m.Size()
}
func (m *Capabilities) XXX_DiscardUnknown() {
	xxx_messageInfo_Capabilities.DiscardUnknown(m)
}

var xxx_messageInfo_Capabilities proto.InternalMessageInfo

func (m *Capabilities) GetPermitted() []Capability {
	if m != nil {
		return m.Permitted
	}
	return nil
}

func (m *Capabilities) GetEffective() []Capability {
	if m != nil {
		return m.Effective
	}
	return nil
}

func (m *Capabilities) GetInheritable() []Capability {
	if m != nil {
		return m.Inheritable
	}
	return nil
}

func (m *Capabilities) GetBounding() []Capability {
	if m != nil {
		return m.Bounding
	}
	return nil
}

func (m *Capabilities) GetAmbient() []Capability {
	if m != nil {
		return m.Ambient
	}
	return nil
}

// User represents the user for the container process.
type User struct {
	// User ID in the container namespace.
	Uid uint32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// Group ID in the container namespace.
	Gid uint32 `protobuf:"varint,2,opt,name=gid,proto3" json:"gid,omitempty"`
	// umask of the user.
	Umask uint32 `protobuf:"varint,3,opt,name=umask,proto3" json:"umask,omitempty"`
	// Additional group IDs in the container namespace to be added to the process.
	AdditionalGids       []uint32 `protobuf:"varint,4,rep,packed,name=additional_gids,json=additionalGids,proto3" json:"additional_gids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()      { *m = User{} }
func (*User) ProtoMessage() {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc9eca0068b2381, []int{5}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetUid() uint32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *User) GetGid() uint32 {
	if m != nil {
		return m.Gid
	}
	return 0
}

func (m *User) GetUmask() uint32 {
	if m != nil {
		return m.Umask
	}
	return 0
}

func (m *User) GetAdditionalGids() []uint32 {
	if m != nil {
		return m.AdditionalGids
	}
	return nil
}

func init() {
	proto.RegisterEnum("os.container.process.ResourceLimitType", ResourceLimitType_name, ResourceLimitType_value)
	proto.RegisterEnum("os.container.process.Capability", Capability_name, Capability_value)
	proto.RegisterType((*ContainerProcess)(nil), "os.container.process.ContainerProcess")
	proto.RegisterType((*Terminal)(nil), "os.container.process.Terminal")
	proto.RegisterType((*EnvironmentVariable)(nil), "os.container.process.EnvironmentVariable")
	proto.RegisterType((*ResourceLimit)(nil), "os.container.process.ResourceLimit")
	proto.RegisterType((*Capabilities)(nil), "os.container.process.Capabilities")
	proto.RegisterType((*User)(nil), "os.container.process.User")
}

func init() {
	proto.RegisterFile("pkg/api/os/container/process/v0/api.proto", fileDescriptor_2bc9eca0068b2381)
}

var fileDescriptor_2bc9eca0068b2381 = []byte{
	// 877 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x4d, 0x6f, 0xe2, 0x46,
	0x18, 0x8e, 0xb1, 0x49, 0xe0, 0x25, 0x90, 0xc9, 0x6c, 0xb6, 0x42, 0xa9, 0x6a, 0x21, 0xaa, 0x6a,
	0xd9, 0x95, 0x0a, 0x55, 0x7a, 0xdb, 0xed, 0x87, 0x08, 0x71, 0x22, 0x6b, 0xc3, 0x47, 0xc7, 0x66,
	0xab, 0xee, 0x05, 0x19, 0x3c, 0x31, 0xa3, 0x05, 0xdb, 0xb2, 0x07, 0x56, 0xb9, 0xf5, 0xe7, 0xf4,
	0xda, 0x7f, 0xd1, 0x43, 0x0f, 0x3d, 0xee, 0xb1, 0xe1, 0xd4, 0xe3, 0x1e, 0x7b, 0xac, 0x66, 0x6c,
	0x03, 0x51, 0x51, 0xcb, 0xed, 0x7d, 0x9f, 0x79, 0x9e, 0xc7, 0xf3, 0x7e, 0x8c, 0x0c, 0xcf, 0xc3,
	0x77, 0x5e, 0xcb, 0x09, 0x59, 0x2b, 0x88, 0x5b, 0x93, 0xc0, 0xe7, 0x0e, 0xf3, 0x69, 0xd4, 0x0a,
	0xa3, 0x60, 0x42, 0xe3, 0xb8, 0xb5, 0xfc, 0x4a, 0x9c, 0x35, 0xc3, 0x28, 0xe0, 0x01, 0x3e, 0x0b,
	0xe2, 0xe6, 0x9a, 0xd2, 0x4c, 0x29, 0xe7, 0x67, 0x5e, 0xe0, 0x05, 0x92, 0xd0, 0x12, 0x51, 0xc2,
	0x3d, 0xff, 0xd4, 0x0b, 0x02, 0x6f, 0x46, 0x5b, 0x32, 0x1b, 0x2f, 0xee, 0x5a, 0x74, 0x1e, 0xf2,
	0xfb, 0xe4, 0xb0, 0xfe, 0x57, 0x0e, 0x50, 0x27, 0x33, 0x1a, 0x24, 0x3e, 0xf8, 0x25, 0x14, 0x38,
	0x8d, 0xe6, 0xcc, 0x77, 0x66, 0x55, 0xa5, 0xa6, 0x34, 0x4a, 0x17, 0x7a, 0x73, 0xd7, 0x07, 0x9b,
	0x76, 0xca, 0x22, 0x6b, 0x3e, 0x46, 0xa0, 0x4e, 0xde, 0xbb, 0xd5, 0x5c, 0x4d, 0x69, 0x14, 0x89,
	0x08, 0xf1, 0x2b, 0x50, 0xa9, 0xbf, 0xac, 0xaa, 0x35, 0xb5, 0x51, 0xba, 0x78, 0xbe, 0xdb, 0xc8,
	0xf0, 0x97, 0x2c, 0x0a, 0xfc, 0x39, 0xf5, 0xf9, 0x1b, 0x27, 0x62, 0xce, 0x78, 0x46, 0x89, 0x50,
	0x61, 0x0c, 0x9a, 0x13, 0x79, 0x71, 0x55, 0xab, 0xa9, 0x8d, 0x22, 0x91, 0x31, 0xfe, 0x16, 0x8e,
	0xa2, 0x19, 0x9b, 0x33, 0x1e, 0x57, 0xf3, 0xd2, 0xf4, 0xf3, 0xdd, 0xa6, 0x84, 0xc6, 0xc1, 0x22,
	0x9a, 0xd0, 0x5b, 0xc1, 0x25, 0x99, 0x06, 0x5f, 0xc3, 0xf1, 0xc4, 0x09, 0x9d, 0x31, 0x9b, 0x31,
	0xce, 0x68, 0x5c, 0x3d, 0x94, 0x15, 0xd6, 0x77, 0x7b, 0x74, 0xb6, 0x98, 0xe4, 0x91, 0x0e, 0x37,
	0x41, 0x5b, 0xc4, 0x34, 0xaa, 0x1e, 0x49, 0xfd, 0xf9, 0x6e, 0xfd, 0x30, 0xa6, 0x11, 0x91, 0xbc,
	0xfa, 0x00, 0x0a, 0x59, 0xbf, 0xf0, 0x27, 0x70, 0x48, 0x7d, 0x51, 0xa5, 0xec, 0x6f, 0x81, 0xa4,
	0x99, 0xc0, 0xa7, 0x94, 0x79, 0x53, 0x2e, 0x1b, 0x58, 0x26, 0x69, 0x86, 0xcf, 0x20, 0xff, 0x9e,
	0xb9, 0x7c, 0x5a, 0x55, 0x25, 0x9c, 0x24, 0xf5, 0xef, 0xe1, 0xc9, 0x8e, 0xc6, 0x89, 0x9e, 0xf9,
	0xce, 0x3c, 0xb1, 0x2e, 0x12, 0x19, 0x0b, 0x83, 0xa5, 0x33, 0x5b, 0xd0, 0x74, 0x30, 0x49, 0x52,
	0xff, 0xa0, 0x40, 0xf9, 0x51, 0x97, 0xf0, 0x2b, 0xd0, 0xf8, 0x7d, 0x98, 0x68, 0x2b, 0x17, 0xcf,
	0xf6, 0x68, 0xac, 0x7d, 0x1f, 0x52, 0x22, 0x45, 0xf8, 0x33, 0x80, 0x38, 0xb8, 0xe3, 0xa3, 0xcd,
	0x97, 0x34, 0x52, 0x14, 0xc8, 0x1b, 0x01, 0xe0, 0x2f, 0xa0, 0x22, 0x8f, 0x17, 0xbe, 0x9c, 0x04,
	0x75, 0x65, 0x35, 0x05, 0x52, 0x16, 0xe8, 0x30, 0x03, 0x85, 0xcb, 0xd4, 0x89, 0xdc, 0xd4, 0x45,
	0x4b, 0x5c, 0x04, 0xb2, 0x76, 0x91, 0xc7, 0x1b, 0x97, 0x7c, 0xe2, 0x22, 0xd0, 0xb5, 0x4b, 0xfd,
	0xf7, 0x1c, 0x1c, 0x6f, 0x0f, 0x0f, 0x7f, 0x07, 0xc5, 0x50, 0xb4, 0x9f, 0x0b, 0x89, 0x52, 0x53,
	0x1b, 0x95, 0x8b, 0xda, 0xff, 0xcc, 0xfc, 0x9e, 0x6c, 0x24, 0x42, 0x4f, 0xef, 0xee, 0xe8, 0x84,
	0xb3, 0xa5, 0xa8, 0x6d, 0x4f, 0xfd, 0x5a, 0x82, 0x2f, 0xa1, 0xc4, 0xfc, 0x29, 0x8d, 0x18, 0x97,
	0x73, 0x57, 0xf7, 0x74, 0xd8, 0x16, 0xe1, 0x6f, 0xa0, 0x30, 0x0e, 0x16, 0xbe, 0xcb, 0x7c, 0x4f,
	0xbe, 0x88, 0x7d, 0x0c, 0xd6, 0x0a, 0xfc, 0x12, 0x8e, 0x9c, 0xf9, 0x98, 0x51, 0x9f, 0xcb, 0x77,
	0xb3, 0x8f, 0x38, 0x13, 0xd4, 0x19, 0x68, 0x62, 0x95, 0xc5, 0xf3, 0x5e, 0x30, 0x57, 0xae, 0x47,
	0x99, 0x88, 0x50, 0x20, 0x1e, 0x73, 0xd3, 0x7d, 0x15, 0xa1, 0xd8, 0xb5, 0xc5, 0xdc, 0x89, 0xdf,
	0x65, 0xcb, 0x2a, 0x13, 0xfc, 0x0c, 0x4e, 0x1c, 0xd7, 0x65, 0x9c, 0x05, 0xbe, 0x33, 0x1b, 0x79,
	0xcc, 0x4d, 0x1e, 0x75, 0x99, 0x54, 0x36, 0xf0, 0x0d, 0x73, 0xe3, 0x17, 0x1f, 0x15, 0x38, 0xfd,
	0xd7, 0x86, 0xe1, 0x13, 0x28, 0x91, 0x5b, 0xb3, 0x6b, 0xda, 0xa3, 0x5e, 0xbf, 0x67, 0xa0, 0x03,
	0x5c, 0x86, 0x62, 0x0a, 0xb4, 0x2d, 0xa4, 0xe0, 0x0a, 0x40, 0x9a, 0x76, 0x06, 0x43, 0x94, 0xdb,
	0xe2, 0x5f, 0xb5, 0xed, 0x36, 0x52, 0x31, 0x82, 0xe3, 0x14, 0xb8, 0xb6, 0xcc, 0xb7, 0x06, 0xd2,
	0x30, 0x86, 0x4a, 0x8a, 0x74, 0x8d, 0xee, 0x6d, 0xbf, 0xf3, 0x1a, 0xe5, 0xf1, 0x13, 0x38, 0xc9,
	0x30, 0xeb, 0xe6, 0x87, 0xa1, 0x31, 0x34, 0xd0, 0x21, 0x3e, 0x85, 0xf2, 0xfa, 0xdb, 0xd7, 0xe6,
	0xad, 0x81, 0x8e, 0xb6, 0xdc, 0x7a, 0x03, 0xd2, 0xef, 0xa0, 0xc2, 0x16, 0x89, 0xd8, 0xb6, 0xd9,
	0x35, 0x50, 0x11, 0x3f, 0x85, 0xd3, 0x14, 0xb2, 0xcc, 0x9b, 0x81, 0xd1, 0xbb, 0x32, 0x7b, 0x37,
	0x08, 0xb6, 0xb4, 0x96, 0xdd, 0xee, 0xbc, 0x46, 0xa5, 0x17, 0xbf, 0x2a, 0x00, 0x9b, 0xae, 0xe3,
	0x63, 0x28, 0x74, 0xda, 0x83, 0xac, 0xd0, 0xa7, 0x70, 0x2a, 0xb2, 0x4b, 0x71, 0xc3, 0x91, 0x35,
	0xb4, 0x84, 0x11, 0x52, 0x84, 0x8b, 0x80, 0xcd, 0x41, 0x67, 0x24, 0xef, 0x9e, 0x13, 0x37, 0x90,
	0x32, 0xc3, 0x1e, 0xb5, 0xaf, 0xba, 0x66, 0x0f, 0xa9, 0xa2, 0x0b, 0x02, 0x1a, 0x18, 0xe4, 0xba,
	0xdb, 0xef, 0x21, 0x2d, 0xe3, 0x58, 0x3f, 0x59, 0x29, 0x27, 0x9f, 0x19, 0x09, 0xe8, 0xb2, 0xdf,
	0xb7, 0x93, 0x7a, 0x33, 0x84, 0xb4, 0x7f, 0x34, 0xfb, 0x49, 0xbd, 0x19, 0x24, 0x8b, 0x2b, 0x5c,
	0x5e, 0x7d, 0x78, 0xd0, 0x0f, 0x3e, 0x3e, 0xe8, 0xca, 0xdf, 0x0f, 0xfa, 0xc1, 0xcf, 0x2b, 0x5d,
	0xf9, 0x65, 0xa5, 0x2b, 0xbf, 0xad, 0x74, 0xe5, 0x8f, 0x95, 0xae, 0xfc, 0xb9, 0xd2, 0x95, 0xb7,
	0x75, 0x67, 0xc6, 0xbf, 0x0c, 0xe2, 0xff, 0xfa, 0xa5, 0x8d, 0x0f, 0xe5, 0x6f, 0xe8, 0xeb, 0x7f,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x0c, 0xb8, 0xcb, 0xa0, 0xfc, 0x06, 0x00, 0x00,
}

func (this *ContainerProcess) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ContainerProcess)
	if !ok {
		that2, ok := that.(ContainerProcess)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Terminal.Equal(that1.Terminal) {
		return false
	}
	if this.Cwd != that1.Cwd {
		return false
	}
	if len(this.Env) != len(that1.Env) {
		return false
	}
	for i := range this.Env {
		if !this.Env[i].Equal(that1.Env[i]) {
			return false
		}
	}
	if len(this.Args) != len(that1.Args) {
		return false
	}
	for i := range this.Args {
		if this.Args[i] != that1.Args[i] {
			return false
		}
	}
	if len(this.Rlimits) != len(that1.Rlimits) {
		return false
	}
	for i := range this.Rlimits {
		if !this.Rlimits[i].Equal(that1.Rlimits[i]) {
			return false
		}
	}
	if !this.Capabilities.Equal(that1.Capabilities) {
		return false
	}
	if !this.User.Equal(that1.User) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Terminal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Terminal)
	if !ok {
		that2, ok := that.(Terminal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Enable != that1.Enable {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	if this.Width != that1.Width {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *EnvironmentVariable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnvironmentVariable)
	if !ok {
		that2, ok := that.(EnvironmentVariable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ResourceLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResourceLimit)
	if !ok {
		that2, ok := that.(ResourceLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.SoftValue != that1.SoftValue {
		return false
	}
	if this.SoftUnlimited != that1.SoftUnlimited {
		return false
	}
	if this.HardValue != that1.HardValue {
		return false
	}
	if this.HardUnlimited != that1.HardUnlimited {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Capabilities) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Capabilities)
	if !ok {
		that2, ok := that.(Capabilities)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Permitted) != len(that1.Permitted) {
		return false
	}
	for i := range this.Permitted {
		if this.Permitted[i] != that1.Permitted[i] {
			return false
		}
	}
	if len(this.Effective) != len(that1.Effective) {
		return false
	}
	for i := range this.Effective {
		if this.Effective[i] != that1.Effective[i] {
			return false
		}
	}
	if len(this.Inheritable) != len(that1.Inheritable) {
		return false
	}
	for i := range this.Inheritable {
		if this.Inheritable[i] != that1.Inheritable[i] {
			return false
		}
	}
	if len(this.Bounding) != len(that1.Bounding) {
		return false
	}
	for i := range this.Bounding {
		if this.Bounding[i] != that1.Bounding[i] {
			return false
		}
	}
	if len(this.Ambient) != len(that1.Ambient) {
		return false
	}
	for i := range this.Ambient {
		if this.Ambient[i] != that1.Ambient[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *User) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User)
	if !ok {
		that2, ok := that.(User)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.Gid != that1.Gid {
		return false
	}
	if this.Umask != that1.Umask {
		return false
	}
	if len(this.AdditionalGids) != len(that1.AdditionalGids) {
		return false
	}
	for i := range this.AdditionalGids {
		if this.AdditionalGids[i] != that1.AdditionalGids[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ContainerProcess) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&v0.ContainerProcess{")
	if this.Terminal != nil {
		s = append(s, "Terminal: "+fmt.Sprintf("%#v", this.Terminal)+",\n")
	}
	s = append(s, "Cwd: "+fmt.Sprintf("%#v", this.Cwd)+",\n")
	if this.Env != nil {
		s = append(s, "Env: "+fmt.Sprintf("%#v", this.Env)+",\n")
	}
	s = append(s, "Args: "+fmt.Sprintf("%#v", this.Args)+",\n")
	if this.Rlimits != nil {
		s = append(s, "Rlimits: "+fmt.Sprintf("%#v", this.Rlimits)+",\n")
	}
	if this.Capabilities != nil {
		s = append(s, "Capabilities: "+fmt.Sprintf("%#v", this.Capabilities)+",\n")
	}
	if this.User != nil {
		s = append(s, "User: "+fmt.Sprintf("%#v", this.User)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Terminal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&v0.Terminal{")
	s = append(s, "Enable: "+fmt.Sprintf("%#v", this.Enable)+",\n")
	s = append(s, "Height: "+fmt.Sprintf("%#v", this.Height)+",\n")
	s = append(s, "Width: "+fmt.Sprintf("%#v", this.Width)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EnvironmentVariable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&v0.EnvironmentVariable{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResourceLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&v0.ResourceLimit{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "SoftValue: "+fmt.Sprintf("%#v", this.SoftValue)+",\n")
	s = append(s, "SoftUnlimited: "+fmt.Sprintf("%#v", this.SoftUnlimited)+",\n")
	s = append(s, "HardValue: "+fmt.Sprintf("%#v", this.HardValue)+",\n")
	s = append(s, "HardUnlimited: "+fmt.Sprintf("%#v", this.HardUnlimited)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Capabilities) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&v0.Capabilities{")
	s = append(s, "Permitted: "+fmt.Sprintf("%#v", this.Permitted)+",\n")
	s = append(s, "Effective: "+fmt.Sprintf("%#v", this.Effective)+",\n")
	s = append(s, "Inheritable: "+fmt.Sprintf("%#v", this.Inheritable)+",\n")
	s = append(s, "Bounding: "+fmt.Sprintf("%#v", this.Bounding)+",\n")
	s = append(s, "Ambient: "+fmt.Sprintf("%#v", this.Ambient)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *User) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&v0.User{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "Gid: "+fmt.Sprintf("%#v", this.Gid)+",\n")
	s = append(s, "Umask: "+fmt.Sprintf("%#v", this.Umask)+",\n")
	s = append(s, "AdditionalGids: "+fmt.Sprintf("%#v", this.AdditionalGids)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringApi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ContainerProcess) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerProcess) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerProcess) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Capabilities != nil {
		{
			size, err := m.Capabilities.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Rlimits) > 0 {
		for iNdEx := len(m.Rlimits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rlimits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Args[iNdEx])
			copy(dAtA[i:], m.Args[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Args[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Env) > 0 {
		for iNdEx := len(m.Env) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Env[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Cwd) > 0 {
		i -= len(m.Cwd)
		copy(dAtA[i:], m.Cwd)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cwd)))
		i--
		dAtA[i] = 0x12
	}
	if m.Terminal != nil {
		{
			size, err := m.Terminal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Terminal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Terminal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Terminal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Width != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x18
	}
	if m.Height != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.Enable {
		i--
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EnvironmentVariable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnvironmentVariable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnvironmentVariable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResourceLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HardUnlimited {
		i--
		if m.HardUnlimited {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.HardValue != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HardValue))
		i--
		dAtA[i] = 0x20
	}
	if m.SoftUnlimited {
		i--
		if m.SoftUnlimited {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.SoftValue != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SoftValue))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Capabilities) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Capabilities) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Capabilities) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ambient) > 0 {
		dAtA5 := make([]byte, len(m.Ambient)*10)
		var j4 int
		for _, num := range m.Ambient {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintApi(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Bounding) > 0 {
		dAtA7 := make([]byte, len(m.Bounding)*10)
		var j6 int
		for _, num := range m.Bounding {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintApi(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Inheritable) > 0 {
		dAtA9 := make([]byte, len(m.Inheritable)*10)
		var j8 int
		for _, num := range m.Inheritable {
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintApi(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Effective) > 0 {
		dAtA11 := make([]byte, len(m.Effective)*10)
		var j10 int
		for _, num := range m.Effective {
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintApi(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Permitted) > 0 {
		dAtA13 := make([]byte, len(m.Permitted)*10)
		var j12 int
		for _, num := range m.Permitted {
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		i -= j12
		copy(dAtA[i:], dAtA13[:j12])
		i = encodeVarintApi(dAtA, i, uint64(j12))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AdditionalGids) > 0 {
		dAtA15 := make([]byte, len(m.AdditionalGids)*10)
		var j14 int
		for _, num := range m.AdditionalGids {
			for num >= 1<<7 {
				dAtA15[j14] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j14++
			}
			dAtA15[j14] = uint8(num)
			j14++
		}
		i -= j14
		copy(dAtA[i:], dAtA15[:j14])
		i = encodeVarintApi(dAtA, i, uint64(j14))
		i--
		dAtA[i] = 0x22
	}
	if m.Umask != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Umask))
		i--
		dAtA[i] = 0x18
	}
	if m.Gid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Gid))
		i--
		dAtA[i] = 0x10
	}
	if m.Uid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ContainerProcess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Terminal != nil {
		l = m.Terminal.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cwd)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Env) > 0 {
		for _, e := range m.Env {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.Args) > 0 {
		for _, s := range m.Args {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.Rlimits) > 0 {
		for _, e := range m.Rlimits {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Capabilities != nil {
		l = m.Capabilities.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Terminal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enable {
		n += 2
	}
	if m.Height != 0 {
		n += 1 + sovApi(uint64(m.Height))
	}
	if m.Width != 0 {
		n += 1 + sovApi(uint64(m.Width))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EnvironmentVariable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResourceLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.SoftValue != 0 {
		n += 1 + sovApi(uint64(m.SoftValue))
	}
	if m.SoftUnlimited {
		n += 2
	}
	if m.HardValue != 0 {
		n += 1 + sovApi(uint64(m.HardValue))
	}
	if m.HardUnlimited {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Capabilities) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Permitted) > 0 {
		l = 0
		for _, e := range m.Permitted {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if len(m.Effective) > 0 {
		l = 0
		for _, e := range m.Effective {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if len(m.Inheritable) > 0 {
		l = 0
		for _, e := range m.Inheritable {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if len(m.Bounding) > 0 {
		l = 0
		for _, e := range m.Bounding {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if len(m.Ambient) > 0 {
		l = 0
		for _, e := range m.Ambient {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	if m.Gid != 0 {
		n += 1 + sovApi(uint64(m.Gid))
	}
	if m.Umask != 0 {
		n += 1 + sovApi(uint64(m.Umask))
	}
	if len(m.AdditionalGids) > 0 {
		l = 0
		for _, e := range m.AdditionalGids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ContainerProcess) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForEnv := "[]*EnvironmentVariable{"
	for _, f := range this.Env {
		repeatedStringForEnv += strings.Replace(f.String(), "EnvironmentVariable", "EnvironmentVariable", 1) + ","
	}
	repeatedStringForEnv += "}"
	repeatedStringForRlimits := "[]*ResourceLimit{"
	for _, f := range this.Rlimits {
		repeatedStringForRlimits += strings.Replace(f.String(), "ResourceLimit", "ResourceLimit", 1) + ","
	}
	repeatedStringForRlimits += "}"
	s := strings.Join([]string{`&ContainerProcess{`,
		`Terminal:` + strings.Replace(this.Terminal.String(), "Terminal", "Terminal", 1) + `,`,
		`Cwd:` + fmt.Sprintf("%v", this.Cwd) + `,`,
		`Env:` + repeatedStringForEnv + `,`,
		`Args:` + fmt.Sprintf("%v", this.Args) + `,`,
		`Rlimits:` + repeatedStringForRlimits + `,`,
		`Capabilities:` + strings.Replace(this.Capabilities.String(), "Capabilities", "Capabilities", 1) + `,`,
		`User:` + strings.Replace(this.User.String(), "User", "User", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Terminal) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Terminal{`,
		`Enable:` + fmt.Sprintf("%v", this.Enable) + `,`,
		`Height:` + fmt.Sprintf("%v", this.Height) + `,`,
		`Width:` + fmt.Sprintf("%v", this.Width) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnvironmentVariable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnvironmentVariable{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResourceLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResourceLimit{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`SoftValue:` + fmt.Sprintf("%v", this.SoftValue) + `,`,
		`SoftUnlimited:` + fmt.Sprintf("%v", this.SoftUnlimited) + `,`,
		`HardValue:` + fmt.Sprintf("%v", this.HardValue) + `,`,
		`HardUnlimited:` + fmt.Sprintf("%v", this.HardUnlimited) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Capabilities) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Capabilities{`,
		`Permitted:` + fmt.Sprintf("%v", this.Permitted) + `,`,
		`Effective:` + fmt.Sprintf("%v", this.Effective) + `,`,
		`Inheritable:` + fmt.Sprintf("%v", this.Inheritable) + `,`,
		`Bounding:` + fmt.Sprintf("%v", this.Bounding) + `,`,
		`Ambient:` + fmt.Sprintf("%v", this.Ambient) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *User) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&User{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Gid:` + fmt.Sprintf("%v", this.Gid) + `,`,
		`Umask:` + fmt.Sprintf("%v", this.Umask) + `,`,
		`AdditionalGids:` + fmt.Sprintf("%v", this.AdditionalGids) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ContainerProcess) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerProcess: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerProcess: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Terminal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Terminal == nil {
				m.Terminal = &Terminal{}
			}
			if err := m.Terminal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cwd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cwd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Env = append(m.Env, &EnvironmentVariable{})
			if err := m.Env[len(m.Env)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rlimits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rlimits = append(m.Rlimits, &ResourceLimit{})
			if err := m.Rlimits[len(m.Rlimits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capabilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Capabilities == nil {
				m.Capabilities = &Capabilities{}
			}
			if err := m.Capabilities.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Terminal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Terminal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Terminal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnvironmentVariable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnvironmentVariable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnvironmentVariable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ResourceLimitType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftValue", wireType)
			}
			m.SoftValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SoftValue |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftUnlimited", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SoftUnlimited = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardValue", wireType)
			}
			m.HardValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HardValue |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardUnlimited", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HardUnlimited = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Capabilities) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Capabilities: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Capabilities: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v Capability
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Capability(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Permitted = append(m.Permitted, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Permitted) == 0 {
					m.Permitted = make([]Capability, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Capability
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Capability(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Permitted = append(m.Permitted, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Permitted", wireType)
			}
		case 2:
			if wireType == 0 {
				var v Capability
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Capability(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Effective = append(m.Effective, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Effective) == 0 {
					m.Effective = make([]Capability, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Capability
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Capability(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Effective = append(m.Effective, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Effective", wireType)
			}
		case 3:
			if wireType == 0 {
				var v Capability
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Capability(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Inheritable = append(m.Inheritable, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Inheritable) == 0 {
					m.Inheritable = make([]Capability, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Capability
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Capability(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Inheritable = append(m.Inheritable, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Inheritable", wireType)
			}
		case 4:
			if wireType == 0 {
				var v Capability
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Capability(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Bounding = append(m.Bounding, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Bounding) == 0 {
					m.Bounding = make([]Capability, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Capability
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Capability(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Bounding = append(m.Bounding, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Bounding", wireType)
			}
		case 5:
			if wireType == 0 {
				var v Capability
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Capability(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ambient = append(m.Ambient, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Ambient) == 0 {
					m.Ambient = make([]Capability, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Capability
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Capability(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ambient = append(m.Ambient, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ambient", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gid", wireType)
			}
			m.Gid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Umask", wireType)
			}
			m.Umask = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Umask |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AdditionalGids = append(m.AdditionalGids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AdditionalGids) == 0 {
					m.AdditionalGids = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AdditionalGids = append(m.AdditionalGids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalGids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
