// To regenerate api.pb.go run `codegen -p`.
syntax = "proto3";

package os.machine.image;

import "gogoproto/gogo.proto";
import "google/protobuf/empty.proto";

option go_package = "alt-os/api/os/machine/image/v0";
option (gogoproto.gostring_all) = true;
option (gogoproto.equal_all) = true;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) =  true;
option (gogoproto.populate_all) = false;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;


// VmImageService is a service for managing virtual machine
// images that are to be consumed by the VM runtime service.
// After a successful call to ApiServe the image service can begin
// creating and managing images.
service VmImageService {
	// ApiServe enables the virtual machine image service api according to the given configuration.
	rpc ApiServe(ApiServeRequest) returns (google.protobuf.Empty) {}
	// ApiUnserve disables the virtual machine image service api.
	rpc ApiUnserve(ApiUnserveRequest) returns (google.protobuf.Empty) {}
	// Create generates a new image in a subdirectory of the image service root directory.
	rpc Create(CreateRequest) returns (google.protobuf.Empty) {}
}

// ApiServeRequest specifies a VmImageService.Serve call.
message ApiServeRequest {
	// The hostname for the API server to listen on.
	string api_hostname = 1;
	// The port for the API server to listen on.
	uint32 api_port = 2;
	// The number of seconds to timeout the API request.
	uint32 api_timeout = 3;
	// The path to the root directory of images.
	string root_dir = 4;
}

// ApiUnserveRequest specifies a VmImageService.Unserve call.
message ApiUnserveRequest {
	// The hostname of the listening API server to operate on.
	string api_hostname = 1;
	// The port of the listening API server to operate on.
	uint32 api_port = 2;
	// The number of seconds to timeout the API request.
	uint32 api_timeout = 3;
}

// CreateRequest specifies a VmImageService.Create call.
message CreateRequest {
	// The hostname of the listening API server to operate on.
	string api_hostname = 1;
	// The port of the listening API server to operate on.
	uint32 api_port = 2;
	// The number of seconds to timeout the API request.
	uint32 api_timeout = 3;
	// The path to a file containing serialized VirtualMachines defining the images to create.
	// Not allowed if virtual_machines is set.
	string virtual_machines_file = 4;
	// Objects defining the virtual_machines to create. Not allowed if virtual_machines_file is set.
	repeated VirtualMachine virtual_machines = 5;
}

// VirtualMachine defines settings for a machine hosting OS containers.
message VirtualMachine {
	// The name of the subdirectory of the created virtual machine image
	// within the service's image root directory.
	string image_dir = 1;
	// The bootable UEFI image to load when the virtual machine boots.
	string efi_path = 2;
	// Path to the custom bios code image to boot with.
	string bios_image = 3;
	// Path to the custom bios variables image to boot with.
	string vars_image = 4;
	// Total memory of the machine in bytes.
	uint64 memory = 5;
	// Number of processors available.
	uint64 processors = 6;
	// The type of cpu architecture.
	ArchType arch_type = 7;
	// Whether the hardware clock is UTC time.
	bool clock_utc = 8;
	// Primary pointing device type.
	PointingDeviceType pointing_device = 9;
	// Video settings for the machine.
	Video video = 10;
	// Audio settings for the machine.
	Audio audio = 11;
	// Storage devices attached to the machine.
	repeated StorageDevice storage = 12;
	// Network devices attached to the machine.
	repeated NetworkDevice network = 13;
	// Serial devices attached to the machine.
	repeated SerialDevice serial = 14;
}

// Video defines machine video settings.
message Video {
	// Total video memory in bytes.
	uint64 memory = 1;
	// Number of displays attached to the machine.
	uint64 displays = 2;
}

// Audio defines machine audio settings.
message Audio {
	// Whether audio output is enabled.
	bool enable_output = 1;
	// Whether audio input is enabled.
	bool enable_input = 2;
}

// StorageDevice defines a storage device attached to the machine.
message StorageDevice {
	// The type of storage controller.
	StorageControllerType controller = 1;
	// The type of device.
	StorageDeviceType type = 2;
	// Size of the storage in bytes.
	uint64 size = 3;
	// Whether this storage device is dynamically resizable.
	bool dynamic = 4;
}

// NetworkDevice defines a network device attached to the machine.
message NetworkDevice {
	// The attachment type for the network.
	NetworkAttachmentType type = 1;
	// Whether to use virtio for virtualization. If false, this
	// represents a real network device or a PCNET device under VM.
	bool virtio = 2;
	// The mac address of the device.
	string mac = 3;
}

// SerialDevice defines a 16550A-compatible UART serial device attached to the machine.
message SerialDevice {
	// The serial I/O port. Must be specified if address is not.
	uint32 port = 1;
	// The base address of serial registers. Must be specified if port is not.
	uint32 address = 2;
	// The type of function for the serial port.
	SerialType type = 3;
}

// ArchType represents a type of cpu architecture.
enum ArchType {
	// Represents a null ArchType.
	ARCH_NONE = 0;
	// Intel or AMD x86 with 64-bit extensions.
	ARCH_AMD64 = 1;
	// ARM64.
	ARCH_AARCH64 = 2;
}

// PointingDeviceType represents a type of pointing device.
enum PointingDeviceType {
	// No pointing device.
	POINTING_NONE = 0;
	// A mouse device.
	POINTING_MOUSE = 1;
	// A touch device.
	POINTING_TOUCH = 2;
}

// StorageControllerType represents a type of storage controller.
enum StorageControllerType {
	// Represents a null StorageControllerType.
	STORAGE_CONTROLLER_NONE = 0;
	// AHCI/SATA storage controller.
	STORAGE_CONTROLLER_SATA = 1;
	// USB storage controller.
	STORAGE_CONTROLLER_USB = 2;
}

// StorageDeviceType represents a type of storage device.
enum StorageDeviceType {
	// Represents a null StorageDeviceType.
	STORAGE_DEVICE_NONE = 0;
	// A solid-state storage device.
	STORAGE_DEVICE_SSD = 1;
	// A magnetic hard disk device.
	STORAGE_DEVICE_HDD = 2;
	// An optical disk device.
	STORAGE_DEVICE_OPTICAL = 3;
}

// NetworkAttachmentType represents a type of attachment for a network adapter.
enum NetworkAttachmentType {
	// The machine is directly attached to the network.
	NET_ATTACHMENT_DIRECT = 0;
	// The network is bridged to a VM host network.
	NET_ATTACHMENT_BRIDGED = 1;
	// The network is internal to the machine but allows outbound connections to a
	// VM host network using network address translation.
	NET_ATTACHMENT_NAT_NETWORK = 2;
}

// SerialType represents the type of input or output a
// serial port functions as.
enum SerialType {
	// No function.
	SERIAL_NONE = 0;
	// Serial port functions as standard input.
	SERIAL_STDIN = 1;
	// Serial port functions as standard output.
	SERIAL_STDOUT = 2;
	// Serial port functions as standard error.
	SERIAL_STDERR = 3;
}