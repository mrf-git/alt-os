// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/api/os/machine/runtime/v0/api.proto

package v0

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// VirtualMachineStatus represents the runtime state of a virtual machine.
type VirtualMachineStatus int32

const (
	// The virtual machine is being created.
	VirtualMachineStatus_CREATING VirtualMachineStatus = 0
	// The create operation has finished and the virtual machine has neither exited nor started.
	VirtualMachineStatus_CREATED VirtualMachineStatus = 1
	// The virtual machine has started but has not exited.
	VirtualMachineStatus_RUNNING VirtualMachineStatus = 2
	// The virtual machine has exited.
	VirtualMachineStatus_STOPPED VirtualMachineStatus = 3
)

var VirtualMachineStatus_name = map[int32]string{
	0: "CREATING",
	1: "CREATED",
	2: "RUNNING",
	3: "STOPPED",
}

var VirtualMachineStatus_value = map[string]int32{
	"CREATING": 0,
	"CREATED":  1,
	"RUNNING":  2,
	"STOPPED":  3,
}

func (x VirtualMachineStatus) String() string {
	return proto.EnumName(VirtualMachineStatus_name, int32(x))
}

func (VirtualMachineStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_48372748125e3de9, []int{0}
}

// ApiServeRequest specifies a VmmRuntimeService.Serve call.
type ApiServeRequest struct {
	// The hostname for the API server to listen on.
	ApiHostname string `protobuf:"bytes,1,opt,name=api_hostname,json=apiHostname,proto3" json:"api_hostname,omitempty"`
	// The port for the API server to listen on.
	ApiPort uint32 `protobuf:"varint,2,opt,name=api_port,json=apiPort,proto3" json:"api_port,omitempty"`
	// The number of seconds to timeout the API request.
	ApiTimeout uint32 `protobuf:"varint,3,opt,name=api_timeout,json=apiTimeout,proto3" json:"api_timeout,omitempty"`
	// The root directory of images to load from.
	ImageDir string `protobuf:"bytes,4,opt,name=image_dir,json=imageDir,proto3" json:"image_dir,omitempty"`
	// The maximum number of virtual machines to allow.
	MaxMachines          int64    `protobuf:"varint,5,opt,name=max_machines,json=maxMachines,proto3" json:"max_machines,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApiServeRequest) Reset()      { *m = ApiServeRequest{} }
func (*ApiServeRequest) ProtoMessage() {}
func (*ApiServeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_48372748125e3de9, []int{0}
}
func (m *ApiServeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiServeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApiServeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApiServeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiServeRequest.Merge(m, src)
}
func (m *ApiServeRequest) XXX_Size() int {
	return m.Size()
}
func (m *ApiServeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiServeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApiServeRequest proto.InternalMessageInfo

func (m *ApiServeRequest) GetApiHostname() string {
	if m != nil {
		return m.ApiHostname
	}
	return ""
}

func (m *ApiServeRequest) GetApiPort() uint32 {
	if m != nil {
		return m.ApiPort
	}
	return 0
}

func (m *ApiServeRequest) GetApiTimeout() uint32 {
	if m != nil {
		return m.ApiTimeout
	}
	return 0
}

func (m *ApiServeRequest) GetImageDir() string {
	if m != nil {
		return m.ImageDir
	}
	return ""
}

func (m *ApiServeRequest) GetMaxMachines() int64 {
	if m != nil {
		return m.MaxMachines
	}
	return 0
}

// ApiUnserveRequest specifies a VmmRuntimeService.Unserve call.
type ApiUnserveRequest struct {
	// The hostname of the listening API server to operate on.
	ApiHostname string `protobuf:"bytes,1,opt,name=api_hostname,json=apiHostname,proto3" json:"api_hostname,omitempty"`
	// The port of the listening API server to operate on.
	ApiPort uint32 `protobuf:"varint,2,opt,name=api_port,json=apiPort,proto3" json:"api_port,omitempty"`
	// The number of seconds to timeout the API request.
	ApiTimeout           uint32   `protobuf:"varint,3,opt,name=api_timeout,json=apiTimeout,proto3" json:"api_timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApiUnserveRequest) Reset()      { *m = ApiUnserveRequest{} }
func (*ApiUnserveRequest) ProtoMessage() {}
func (*ApiUnserveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_48372748125e3de9, []int{1}
}
func (m *ApiUnserveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiUnserveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApiUnserveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApiUnserveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiUnserveRequest.Merge(m, src)
}
func (m *ApiUnserveRequest) XXX_Size() int {
	return m.Size()
}
func (m *ApiUnserveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiUnserveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApiUnserveRequest proto.InternalMessageInfo

func (m *ApiUnserveRequest) GetApiHostname() string {
	if m != nil {
		return m.ApiHostname
	}
	return ""
}

func (m *ApiUnserveRequest) GetApiPort() uint32 {
	if m != nil {
		return m.ApiPort
	}
	return 0
}

func (m *ApiUnserveRequest) GetApiTimeout() uint32 {
	if m != nil {
		return m.ApiTimeout
	}
	return 0
}

// ListRequest specifies a VmmRuntimeService.List call.
type ListRequest struct {
	// The hostname of the listening API server to operate on.
	ApiHostname string `protobuf:"bytes,1,opt,name=api_hostname,json=apiHostname,proto3" json:"api_hostname,omitempty"`
	// The port of the listening API server to operate on.
	ApiPort uint32 `protobuf:"varint,2,opt,name=api_port,json=apiPort,proto3" json:"api_port,omitempty"`
	// The number of seconds to timeout the API request.
	ApiTimeout           uint32   `protobuf:"varint,3,opt,name=api_timeout,json=apiTimeout,proto3" json:"api_timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRequest) Reset()      { *m = ListRequest{} }
func (*ListRequest) ProtoMessage() {}
func (*ListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_48372748125e3de9, []int{2}
}
func (m *ListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRequest.Merge(m, src)
}
func (m *ListRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRequest proto.InternalMessageInfo

func (m *ListRequest) GetApiHostname() string {
	if m != nil {
		return m.ApiHostname
	}
	return ""
}

func (m *ListRequest) GetApiPort() uint32 {
	if m != nil {
		return m.ApiPort
	}
	return 0
}

func (m *ListRequest) GetApiTimeout() uint32 {
	if m != nil {
		return m.ApiTimeout
	}
	return 0
}

// ListResponse returns the result of a VmmRuntimeService.List call.
type ListResponse struct {
	// The hostname of the listening API server to operate on.
	ApiHostname string `protobuf:"bytes,1,opt,name=api_hostname,json=apiHostname,proto3" json:"api_hostname,omitempty"`
	// The port of the listening API server to operate on.
	ApiPort uint32 `protobuf:"varint,2,opt,name=api_port,json=apiPort,proto3" json:"api_port,omitempty"`
	// The number of seconds to timeout the API request.
	ApiTimeout uint32 `protobuf:"varint,3,opt,name=api_timeout,json=apiTimeout,proto3" json:"api_timeout,omitempty"`
	// The unique id of the virtual machine.
	Id                   []string `protobuf:"bytes,4,rep,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListResponse) Reset()      { *m = ListResponse{} }
func (*ListResponse) ProtoMessage() {}
func (*ListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_48372748125e3de9, []int{3}
}
func (m *ListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResponse.Merge(m, src)
}
func (m *ListResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListResponse proto.InternalMessageInfo

func (m *ListResponse) GetApiHostname() string {
	if m != nil {
		return m.ApiHostname
	}
	return ""
}

func (m *ListResponse) GetApiPort() uint32 {
	if m != nil {
		return m.ApiPort
	}
	return 0
}

func (m *ListResponse) GetApiTimeout() uint32 {
	if m != nil {
		return m.ApiTimeout
	}
	return 0
}

func (m *ListResponse) GetId() []string {
	if m != nil {
		return m.Id
	}
	return nil
}

// QueryStateRequest specifies a VmmRuntimeService.QueryState call.
type QueryStateRequest struct {
	// The hostname of the listening API server to operate on.
	ApiHostname string `protobuf:"bytes,1,opt,name=api_hostname,json=apiHostname,proto3" json:"api_hostname,omitempty"`
	// The port of the listening API server to operate on.
	ApiPort uint32 `protobuf:"varint,2,opt,name=api_port,json=apiPort,proto3" json:"api_port,omitempty"`
	// The number of seconds to timeout the API request.
	ApiTimeout uint32 `protobuf:"varint,3,opt,name=api_timeout,json=apiTimeout,proto3" json:"api_timeout,omitempty"`
	// The unique id of the virtual machine.
	Id                   string   `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryStateRequest) Reset()      { *m = QueryStateRequest{} }
func (*QueryStateRequest) ProtoMessage() {}
func (*QueryStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_48372748125e3de9, []int{4}
}
func (m *QueryStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStateRequest.Merge(m, src)
}
func (m *QueryStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStateRequest proto.InternalMessageInfo

func (m *QueryStateRequest) GetApiHostname() string {
	if m != nil {
		return m.ApiHostname
	}
	return ""
}

func (m *QueryStateRequest) GetApiPort() uint32 {
	if m != nil {
		return m.ApiPort
	}
	return 0
}

func (m *QueryStateRequest) GetApiTimeout() uint32 {
	if m != nil {
		return m.ApiTimeout
	}
	return 0
}

func (m *QueryStateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// QueryStateResponse returns the result of a VmmRuntimeService.QueryState call.
type QueryStateResponse struct {
	// The request used to create the virtual machine's runtime.
	CreateRequest *CreateRequest `protobuf:"bytes,1,opt,name=create_request,json=createRequest,proto3" json:"create_request,omitempty"`
	// The virtual machine's runtime image directory.
	ImageDir string `protobuf:"bytes,2,opt,name=image_dir,json=imageDir,proto3" json:"image_dir,omitempty"`
	// The runtime status of the virtual machine.
	Status               VirtualMachineStatus `protobuf:"varint,3,opt,name=status,proto3,enum=os.machine.runtime.VirtualMachineStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *QueryStateResponse) Reset()      { *m = QueryStateResponse{} }
func (*QueryStateResponse) ProtoMessage() {}
func (*QueryStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_48372748125e3de9, []int{5}
}
func (m *QueryStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStateResponse.Merge(m, src)
}
func (m *QueryStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStateResponse proto.InternalMessageInfo

func (m *QueryStateResponse) GetCreateRequest() *CreateRequest {
	if m != nil {
		return m.CreateRequest
	}
	return nil
}

func (m *QueryStateResponse) GetImageDir() string {
	if m != nil {
		return m.ImageDir
	}
	return ""
}

func (m *QueryStateResponse) GetStatus() VirtualMachineStatus {
	if m != nil {
		return m.Status
	}
	return VirtualMachineStatus_CREATING
}

// CreateRequest specifies a VmmRuntimeService.Create call.
type CreateRequest struct {
	// The hostname of the listening API server to operate on.
	ApiHostname string `protobuf:"bytes,1,opt,name=api_hostname,json=apiHostname,proto3" json:"api_hostname,omitempty"`
	// The port of the listening API server to operate on.
	ApiPort uint32 `protobuf:"varint,2,opt,name=api_port,json=apiPort,proto3" json:"api_port,omitempty"`
	// The number of seconds to timeout the API request.
	ApiTimeout uint32 `protobuf:"varint,3,opt,name=api_timeout,json=apiTimeout,proto3" json:"api_timeout,omitempty"`
	// The unique id of the virtual machine.
	Id string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	// The virtual machine's image directory.
	Image                string   `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateRequest) Reset()      { *m = CreateRequest{} }
func (*CreateRequest) ProtoMessage() {}
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_48372748125e3de9, []int{6}
}
func (m *CreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRequest.Merge(m, src)
}
func (m *CreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRequest proto.InternalMessageInfo

func (m *CreateRequest) GetApiHostname() string {
	if m != nil {
		return m.ApiHostname
	}
	return ""
}

func (m *CreateRequest) GetApiPort() uint32 {
	if m != nil {
		return m.ApiPort
	}
	return 0
}

func (m *CreateRequest) GetApiTimeout() uint32 {
	if m != nil {
		return m.ApiTimeout
	}
	return 0
}

func (m *CreateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CreateRequest) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

// StartRequest specifies a VmmRuntimeService.Start call.
type StartRequest struct {
	// The hostname of the listening API server to operate on.
	ApiHostname string `protobuf:"bytes,1,opt,name=api_hostname,json=apiHostname,proto3" json:"api_hostname,omitempty"`
	// The port of the listening API server to operate on.
	ApiPort uint32 `protobuf:"varint,2,opt,name=api_port,json=apiPort,proto3" json:"api_port,omitempty"`
	// The number of seconds to timeout the API request.
	ApiTimeout uint32 `protobuf:"varint,3,opt,name=api_timeout,json=apiTimeout,proto3" json:"api_timeout,omitempty"`
	// The unique id of the virtual machine.
	Id                   string   `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartRequest) Reset()      { *m = StartRequest{} }
func (*StartRequest) ProtoMessage() {}
func (*StartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_48372748125e3de9, []int{7}
}
func (m *StartRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartRequest.Merge(m, src)
}
func (m *StartRequest) XXX_Size() int {
	return m.Size()
}
func (m *StartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartRequest proto.InternalMessageInfo

func (m *StartRequest) GetApiHostname() string {
	if m != nil {
		return m.ApiHostname
	}
	return ""
}

func (m *StartRequest) GetApiPort() uint32 {
	if m != nil {
		return m.ApiPort
	}
	return 0
}

func (m *StartRequest) GetApiTimeout() uint32 {
	if m != nil {
		return m.ApiTimeout
	}
	return 0
}

func (m *StartRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// KillRequest specifies a VmmRuntimeService.Kill call.
type KillRequest struct {
	// The hostname of the listening API server to operate on.
	ApiHostname string `protobuf:"bytes,1,opt,name=api_hostname,json=apiHostname,proto3" json:"api_hostname,omitempty"`
	// The port of the listening API server to operate on.
	ApiPort uint32 `protobuf:"varint,2,opt,name=api_port,json=apiPort,proto3" json:"api_port,omitempty"`
	// The number of seconds to timeout the API request.
	ApiTimeout uint32 `protobuf:"varint,3,opt,name=api_timeout,json=apiTimeout,proto3" json:"api_timeout,omitempty"`
	// The unique id of the virtual machine.
	Id                   string   `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KillRequest) Reset()      { *m = KillRequest{} }
func (*KillRequest) ProtoMessage() {}
func (*KillRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_48372748125e3de9, []int{8}
}
func (m *KillRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KillRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KillRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KillRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KillRequest.Merge(m, src)
}
func (m *KillRequest) XXX_Size() int {
	return m.Size()
}
func (m *KillRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KillRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KillRequest proto.InternalMessageInfo

func (m *KillRequest) GetApiHostname() string {
	if m != nil {
		return m.ApiHostname
	}
	return ""
}

func (m *KillRequest) GetApiPort() uint32 {
	if m != nil {
		return m.ApiPort
	}
	return 0
}

func (m *KillRequest) GetApiTimeout() uint32 {
	if m != nil {
		return m.ApiTimeout
	}
	return 0
}

func (m *KillRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// DeleteRequest specifies a VmmRuntimeService.Delete call.
type DeleteRequest struct {
	// The hostname of the listening API server to operate on.
	ApiHostname string `protobuf:"bytes,1,opt,name=api_hostname,json=apiHostname,proto3" json:"api_hostname,omitempty"`
	// The port of the listening API server to operate on.
	ApiPort uint32 `protobuf:"varint,2,opt,name=api_port,json=apiPort,proto3" json:"api_port,omitempty"`
	// The number of seconds to timeout the API request.
	ApiTimeout uint32 `protobuf:"varint,3,opt,name=api_timeout,json=apiTimeout,proto3" json:"api_timeout,omitempty"`
	// The unique id of the virtual machine.
	Id                   string   `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRequest) Reset()      { *m = DeleteRequest{} }
func (*DeleteRequest) ProtoMessage() {}
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_48372748125e3de9, []int{9}
}
func (m *DeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRequest.Merge(m, src)
}
func (m *DeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRequest proto.InternalMessageInfo

func (m *DeleteRequest) GetApiHostname() string {
	if m != nil {
		return m.ApiHostname
	}
	return ""
}

func (m *DeleteRequest) GetApiPort() uint32 {
	if m != nil {
		return m.ApiPort
	}
	return 0
}

func (m *DeleteRequest) GetApiTimeout() uint32 {
	if m != nil {
		return m.ApiTimeout
	}
	return 0
}

func (m *DeleteRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterEnum("os.machine.runtime.VirtualMachineStatus", VirtualMachineStatus_name, VirtualMachineStatus_value)
	proto.RegisterType((*ApiServeRequest)(nil), "os.machine.runtime.ApiServeRequest")
	proto.RegisterType((*ApiUnserveRequest)(nil), "os.machine.runtime.ApiUnserveRequest")
	proto.RegisterType((*ListRequest)(nil), "os.machine.runtime.ListRequest")
	proto.RegisterType((*ListResponse)(nil), "os.machine.runtime.ListResponse")
	proto.RegisterType((*QueryStateRequest)(nil), "os.machine.runtime.QueryStateRequest")
	proto.RegisterType((*QueryStateResponse)(nil), "os.machine.runtime.QueryStateResponse")
	proto.RegisterType((*CreateRequest)(nil), "os.machine.runtime.CreateRequest")
	proto.RegisterType((*StartRequest)(nil), "os.machine.runtime.StartRequest")
	proto.RegisterType((*KillRequest)(nil), "os.machine.runtime.KillRequest")
	proto.RegisterType((*DeleteRequest)(nil), "os.machine.runtime.DeleteRequest")
}

func init() {
	proto.RegisterFile("pkg/api/os/machine/runtime/v0/api.proto", fileDescriptor_48372748125e3de9)
}

var fileDescriptor_48372748125e3de9 = []byte{
	// 682 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xd1, 0x4e, 0x13, 0x4d,
	0x14, 0xee, 0xb4, 0xa5, 0xb4, 0xa7, 0x94, 0x1f, 0x26, 0xe4, 0x4f, 0xff, 0x92, 0x2c, 0x65, 0xff,
	0xa8, 0x8d, 0x89, 0xbb, 0x06, 0x5f, 0xc0, 0x42, 0x1b, 0x21, 0x08, 0xe2, 0x16, 0xb8, 0x30, 0x31,
	0xcd, 0x50, 0xc6, 0x32, 0x71, 0xb7, 0xb3, 0xce, 0xce, 0x12, 0x48, 0xd4, 0x18, 0x9f, 0xc1, 0x87,
	0xf0, 0xd2, 0x17, 0xf0, 0xde, 0x4b, 0x2f, 0xbd, 0x94, 0xbe, 0x80, 0x5e, 0x7a, 0x69, 0x66, 0x76,
	0x91, 0x16, 0xb6, 0xe5, 0xca, 0x72, 0xd7, 0x33, 0x73, 0xfa, 0x9d, 0xef, 0xcc, 0x7c, 0xe7, 0x9b,
	0x85, 0x3b, 0xfe, 0xcb, 0xae, 0x4d, 0x7c, 0x66, 0xf3, 0xc0, 0xf6, 0x48, 0xe7, 0x88, 0xf5, 0xa8,
	0x2d, 0xc2, 0x9e, 0x64, 0x1e, 0xb5, 0x8f, 0xef, 0xab, 0x1d, 0xcb, 0x17, 0x5c, 0x72, 0x8c, 0x79,
	0x60, 0xc5, 0x09, 0x56, 0x9c, 0x50, 0x59, 0xe8, 0xf2, 0x2e, 0xd7, 0xdb, 0xb6, 0xfa, 0x15, 0x65,
	0x56, 0x16, 0xbb, 0x9c, 0x77, 0x5d, 0x6a, 0xeb, 0xe8, 0x20, 0x7c, 0x61, 0x53, 0xcf, 0x97, 0xa7,
	0xd1, 0xa6, 0xf9, 0x09, 0xc1, 0x3f, 0x75, 0x9f, 0xb5, 0xa8, 0x38, 0xa6, 0x0e, 0x7d, 0x15, 0xd2,
	0x40, 0xe2, 0x65, 0x98, 0x21, 0x3e, 0x6b, 0x1f, 0xf1, 0x40, 0xf6, 0x88, 0x47, 0xcb, 0xa8, 0x8a,
	0x6a, 0x05, 0xa7, 0x48, 0x7c, 0xb6, 0x1e, 0x2f, 0xe1, 0xff, 0x20, 0xaf, 0x52, 0x7c, 0x2e, 0x64,
	0x39, 0x5d, 0x45, 0xb5, 0x92, 0x33, 0x4d, 0x7c, 0xb6, 0xc3, 0x85, 0xc4, 0x4b, 0xa0, 0x32, 0xdb,
	0x8a, 0x10, 0x0f, 0x65, 0x39, 0xa3, 0x77, 0x81, 0xf8, 0x6c, 0x37, 0x5a, 0xc1, 0x8b, 0x50, 0x60,
	0x1e, 0xe9, 0xd2, 0xf6, 0x21, 0x13, 0xe5, 0xac, 0xc6, 0xce, 0xeb, 0x85, 0x06, 0x13, 0xaa, 0xb6,
	0x47, 0x4e, 0xda, 0x71, 0x67, 0x41, 0x79, 0xaa, 0x8a, 0x6a, 0x19, 0xa7, 0xe8, 0x91, 0x93, 0xad,
	0x78, 0xc9, 0x14, 0x30, 0x5f, 0xf7, 0xd9, 0x5e, 0x2f, 0x98, 0x1c, 0x67, 0xd3, 0x85, 0xe2, 0x63,
	0x16, 0xc8, 0x09, 0x55, 0x7b, 0x03, 0x33, 0x51, 0xb5, 0xc0, 0xe7, 0xbd, 0x80, 0xfe, 0xed, 0x0b,
	0x99, 0x85, 0x34, 0x3b, 0x2c, 0x67, 0xab, 0x99, 0x5a, 0xc1, 0x49, 0xb3, 0x43, 0xf3, 0x3d, 0x82,
	0xf9, 0xa7, 0x21, 0x15, 0xa7, 0x2d, 0x49, 0xe4, 0xa4, 0x54, 0x71, 0x4e, 0x02, 0xc5, 0x24, 0x3e,
	0x23, 0xc0, 0x83, 0x24, 0xe2, 0xa3, 0x58, 0x87, 0xd9, 0x8e, 0xa0, 0x44, 0xd2, 0xb6, 0x88, 0x78,
	0x69, 0x1e, 0xc5, 0x95, 0x65, 0xeb, 0xea, 0x3c, 0x58, 0x6b, 0x3a, 0x33, 0x6e, 0xc0, 0x29, 0x75,
	0x06, 0xc3, 0x61, 0x19, 0xa6, 0x2f, 0xc9, 0xf0, 0x21, 0xe4, 0x02, 0x49, 0x64, 0x18, 0x68, 0xa6,
	0xb3, 0x2b, 0xb5, 0x24, 0xf8, 0x7d, 0x26, 0x64, 0x48, 0xdc, 0x58, 0x98, 0x2d, 0x9d, 0xef, 0xc4,
	0xff, 0x33, 0x3f, 0x20, 0x28, 0x0d, 0xd5, 0x9f, 0xf0, 0x01, 0xe2, 0x05, 0x98, 0xd2, 0xed, 0xe8,
	0x11, 0x2a, 0x38, 0x51, 0xa0, 0xa4, 0xd5, 0x92, 0x44, 0xc8, 0x1b, 0xba, 0xd5, 0xd7, 0x50, 0xdc,
	0x64, 0xae, 0x7b, 0x43, 0xd5, 0xdf, 0x42, 0xa9, 0x41, 0x5d, 0x7a, 0x53, 0x57, 0x72, 0x77, 0x13,
	0x16, 0x92, 0x34, 0x83, 0x67, 0x20, 0xbf, 0xe6, 0x34, 0xeb, 0xbb, 0x1b, 0xdb, 0x8f, 0xe6, 0x52,
	0xb8, 0x08, 0xd3, 0x3a, 0x6a, 0x36, 0xe6, 0x90, 0x0a, 0x9c, 0xbd, 0xed, 0x6d, 0xb5, 0x93, 0x56,
	0x41, 0x6b, 0xf7, 0xc9, 0xce, 0x4e, 0xb3, 0x31, 0x97, 0x59, 0xf9, 0x91, 0x85, 0xf9, 0x7d, 0xcf,
	0x73, 0x22, 0x31, 0x2a, 0x03, 0x67, 0x1d, 0x8a, 0x37, 0x20, 0x7f, 0x6e, 0xe7, 0xf8, 0xff, 0x24,
	0xd1, 0x5e, 0x32, 0xfb, 0xca, 0xbf, 0x56, 0xf4, 0x3c, 0x58, 0xe7, 0xcf, 0x83, 0xd5, 0x54, 0xcf,
	0x83, 0x99, 0xc2, 0x5b, 0x00, 0x17, 0x3e, 0x8b, 0x6f, 0x8d, 0x00, 0x1b, 0xf6, 0xe1, 0x31, 0x70,
	0x9b, 0x90, 0x55, 0xa6, 0x86, 0x97, 0x92, 0x80, 0x06, 0xcc, 0xb5, 0x52, 0x1d, 0x9d, 0x10, 0x99,
	0x80, 0x99, 0xc2, 0xcf, 0x01, 0x2e, 0xcc, 0x21, 0x99, 0xdb, 0x15, 0x07, 0xab, 0xdc, 0xbe, 0x2e,
	0xed, 0x0f, 0x7c, 0x13, 0x72, 0xd1, 0xec, 0xe2, 0xeb, 0x7d, 0x65, 0x4c, 0xcb, 0x6b, 0x30, 0xa5,
	0x87, 0x0d, 0x27, 0xb6, 0x34, 0x38, 0x87, 0x63, 0x40, 0xea, 0x90, 0x55, 0x23, 0x93, 0x7c, 0x6e,
	0x03, 0xc3, 0x34, 0x06, 0xa2, 0x09, 0xb9, 0x48, 0xf7, 0xc9, 0xed, 0x0c, 0xcd, 0xc4, 0x68, 0x98,
	0xd5, 0xd5, 0x6f, 0x67, 0x46, 0xea, 0xe7, 0x99, 0x81, 0x7e, 0x9d, 0x19, 0xa9, 0x77, 0x7d, 0x03,
	0x7d, 0xec, 0x1b, 0xe8, 0x4b, 0xdf, 0x40, 0x5f, 0xfb, 0x06, 0xfa, 0xde, 0x37, 0xd0, 0xb3, 0x2a,
	0x71, 0xe5, 0x3d, 0x1e, 0x8c, 0xfe, 0x80, 0x39, 0xc8, 0x69, 0xd4, 0x07, 0xbf, 0x03, 0x00, 0x00,
	0xff, 0xff, 0xd2, 0xe4, 0x8d, 0x21, 0xe8, 0x08, 0x00, 0x00,
}

func (this *ApiServeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiServeRequest)
	if !ok {
		that2, ok := that.(ApiServeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ApiHostname != that1.ApiHostname {
		return false
	}
	if this.ApiPort != that1.ApiPort {
		return false
	}
	if this.ApiTimeout != that1.ApiTimeout {
		return false
	}
	if this.ImageDir != that1.ImageDir {
		return false
	}
	if this.MaxMachines != that1.MaxMachines {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ApiUnserveRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiUnserveRequest)
	if !ok {
		that2, ok := that.(ApiUnserveRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ApiHostname != that1.ApiHostname {
		return false
	}
	if this.ApiPort != that1.ApiPort {
		return false
	}
	if this.ApiTimeout != that1.ApiTimeout {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListRequest)
	if !ok {
		that2, ok := that.(ListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ApiHostname != that1.ApiHostname {
		return false
	}
	if this.ApiPort != that1.ApiPort {
		return false
	}
	if this.ApiTimeout != that1.ApiTimeout {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ListResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListResponse)
	if !ok {
		that2, ok := that.(ListResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ApiHostname != that1.ApiHostname {
		return false
	}
	if this.ApiPort != that1.ApiPort {
		return false
	}
	if this.ApiTimeout != that1.ApiTimeout {
		return false
	}
	if len(this.Id) != len(that1.Id) {
		return false
	}
	for i := range this.Id {
		if this.Id[i] != that1.Id[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *QueryStateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryStateRequest)
	if !ok {
		that2, ok := that.(QueryStateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ApiHostname != that1.ApiHostname {
		return false
	}
	if this.ApiPort != that1.ApiPort {
		return false
	}
	if this.ApiTimeout != that1.ApiTimeout {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *QueryStateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryStateResponse)
	if !ok {
		that2, ok := that.(QueryStateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CreateRequest.Equal(that1.CreateRequest) {
		return false
	}
	if this.ImageDir != that1.ImageDir {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CreateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateRequest)
	if !ok {
		that2, ok := that.(CreateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ApiHostname != that1.ApiHostname {
		return false
	}
	if this.ApiPort != that1.ApiPort {
		return false
	}
	if this.ApiTimeout != that1.ApiTimeout {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Image != that1.Image {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *StartRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StartRequest)
	if !ok {
		that2, ok := that.(StartRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ApiHostname != that1.ApiHostname {
		return false
	}
	if this.ApiPort != that1.ApiPort {
		return false
	}
	if this.ApiTimeout != that1.ApiTimeout {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *KillRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KillRequest)
	if !ok {
		that2, ok := that.(KillRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ApiHostname != that1.ApiHostname {
		return false
	}
	if this.ApiPort != that1.ApiPort {
		return false
	}
	if this.ApiTimeout != that1.ApiTimeout {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DeleteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteRequest)
	if !ok {
		that2, ok := that.(DeleteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ApiHostname != that1.ApiHostname {
		return false
	}
	if this.ApiPort != that1.ApiPort {
		return false
	}
	if this.ApiTimeout != that1.ApiTimeout {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ApiServeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&v0.ApiServeRequest{")
	s = append(s, "ApiHostname: "+fmt.Sprintf("%#v", this.ApiHostname)+",\n")
	s = append(s, "ApiPort: "+fmt.Sprintf("%#v", this.ApiPort)+",\n")
	s = append(s, "ApiTimeout: "+fmt.Sprintf("%#v", this.ApiTimeout)+",\n")
	s = append(s, "ImageDir: "+fmt.Sprintf("%#v", this.ImageDir)+",\n")
	s = append(s, "MaxMachines: "+fmt.Sprintf("%#v", this.MaxMachines)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApiUnserveRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&v0.ApiUnserveRequest{")
	s = append(s, "ApiHostname: "+fmt.Sprintf("%#v", this.ApiHostname)+",\n")
	s = append(s, "ApiPort: "+fmt.Sprintf("%#v", this.ApiPort)+",\n")
	s = append(s, "ApiTimeout: "+fmt.Sprintf("%#v", this.ApiTimeout)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&v0.ListRequest{")
	s = append(s, "ApiHostname: "+fmt.Sprintf("%#v", this.ApiHostname)+",\n")
	s = append(s, "ApiPort: "+fmt.Sprintf("%#v", this.ApiPort)+",\n")
	s = append(s, "ApiTimeout: "+fmt.Sprintf("%#v", this.ApiTimeout)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&v0.ListResponse{")
	s = append(s, "ApiHostname: "+fmt.Sprintf("%#v", this.ApiHostname)+",\n")
	s = append(s, "ApiPort: "+fmt.Sprintf("%#v", this.ApiPort)+",\n")
	s = append(s, "ApiTimeout: "+fmt.Sprintf("%#v", this.ApiTimeout)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryStateRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&v0.QueryStateRequest{")
	s = append(s, "ApiHostname: "+fmt.Sprintf("%#v", this.ApiHostname)+",\n")
	s = append(s, "ApiPort: "+fmt.Sprintf("%#v", this.ApiPort)+",\n")
	s = append(s, "ApiTimeout: "+fmt.Sprintf("%#v", this.ApiTimeout)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryStateResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&v0.QueryStateResponse{")
	if this.CreateRequest != nil {
		s = append(s, "CreateRequest: "+fmt.Sprintf("%#v", this.CreateRequest)+",\n")
	}
	s = append(s, "ImageDir: "+fmt.Sprintf("%#v", this.ImageDir)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&v0.CreateRequest{")
	s = append(s, "ApiHostname: "+fmt.Sprintf("%#v", this.ApiHostname)+",\n")
	s = append(s, "ApiPort: "+fmt.Sprintf("%#v", this.ApiPort)+",\n")
	s = append(s, "ApiTimeout: "+fmt.Sprintf("%#v", this.ApiTimeout)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Image: "+fmt.Sprintf("%#v", this.Image)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StartRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&v0.StartRequest{")
	s = append(s, "ApiHostname: "+fmt.Sprintf("%#v", this.ApiHostname)+",\n")
	s = append(s, "ApiPort: "+fmt.Sprintf("%#v", this.ApiPort)+",\n")
	s = append(s, "ApiTimeout: "+fmt.Sprintf("%#v", this.ApiTimeout)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *KillRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&v0.KillRequest{")
	s = append(s, "ApiHostname: "+fmt.Sprintf("%#v", this.ApiHostname)+",\n")
	s = append(s, "ApiPort: "+fmt.Sprintf("%#v", this.ApiPort)+",\n")
	s = append(s, "ApiTimeout: "+fmt.Sprintf("%#v", this.ApiTimeout)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&v0.DeleteRequest{")
	s = append(s, "ApiHostname: "+fmt.Sprintf("%#v", this.ApiHostname)+",\n")
	s = append(s, "ApiPort: "+fmt.Sprintf("%#v", this.ApiPort)+",\n")
	s = append(s, "ApiTimeout: "+fmt.Sprintf("%#v", this.ApiTimeout)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringApi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VmmRuntimeServiceClient is the client API for VmmRuntimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VmmRuntimeServiceClient interface {
	// ApiServe enables the VMM runtime service api according to the given configuration.
	ApiServe(ctx context.Context, in *ApiServeRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// ApiUnserve stops all virtual machines and disables the VMM runtime service api.
	ApiUnserve(ctx context.Context, in *ApiUnserveRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// List gets all virtual machines the runtime knows about.
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// QueryState gets the state of a specified virtual machine.
	QueryState(ctx context.Context, in *QueryStateRequest, opts ...grpc.CallOption) (*QueryStateResponse, error)
	// Create creates a new virtual machine and begins preparing it to be started.
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// Start begins running a created virtual machine.
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// Kill stops a running virtual machine.
	Kill(ctx context.Context, in *KillRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// Delete removes a stopped virtual machine from the runtime.
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type vmmRuntimeServiceClient struct {
	cc *grpc.ClientConn
}

func NewVmmRuntimeServiceClient(cc *grpc.ClientConn) VmmRuntimeServiceClient {
	return &vmmRuntimeServiceClient{cc}
}

func (c *vmmRuntimeServiceClient) ApiServe(ctx context.Context, in *ApiServeRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/os.machine.runtime.VmmRuntimeService/ApiServe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmmRuntimeServiceClient) ApiUnserve(ctx context.Context, in *ApiUnserveRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/os.machine.runtime.VmmRuntimeService/ApiUnserve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmmRuntimeServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/os.machine.runtime.VmmRuntimeService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmmRuntimeServiceClient) QueryState(ctx context.Context, in *QueryStateRequest, opts ...grpc.CallOption) (*QueryStateResponse, error) {
	out := new(QueryStateResponse)
	err := c.cc.Invoke(ctx, "/os.machine.runtime.VmmRuntimeService/QueryState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmmRuntimeServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/os.machine.runtime.VmmRuntimeService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmmRuntimeServiceClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/os.machine.runtime.VmmRuntimeService/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmmRuntimeServiceClient) Kill(ctx context.Context, in *KillRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/os.machine.runtime.VmmRuntimeService/Kill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmmRuntimeServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/os.machine.runtime.VmmRuntimeService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VmmRuntimeServiceServer is the server API for VmmRuntimeService service.
type VmmRuntimeServiceServer interface {
	// ApiServe enables the VMM runtime service api according to the given configuration.
	ApiServe(context.Context, *ApiServeRequest) (*types.Empty, error)
	// ApiUnserve stops all virtual machines and disables the VMM runtime service api.
	ApiUnserve(context.Context, *ApiUnserveRequest) (*types.Empty, error)
	// List gets all virtual machines the runtime knows about.
	List(context.Context, *ListRequest) (*ListResponse, error)
	// QueryState gets the state of a specified virtual machine.
	QueryState(context.Context, *QueryStateRequest) (*QueryStateResponse, error)
	// Create creates a new virtual machine and begins preparing it to be started.
	Create(context.Context, *CreateRequest) (*types.Empty, error)
	// Start begins running a created virtual machine.
	Start(context.Context, *StartRequest) (*types.Empty, error)
	// Kill stops a running virtual machine.
	Kill(context.Context, *KillRequest) (*types.Empty, error)
	// Delete removes a stopped virtual machine from the runtime.
	Delete(context.Context, *DeleteRequest) (*types.Empty, error)
}

// UnimplementedVmmRuntimeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVmmRuntimeServiceServer struct {
}

func (*UnimplementedVmmRuntimeServiceServer) ApiServe(ctx context.Context, req *ApiServeRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiServe not implemented")
}
func (*UnimplementedVmmRuntimeServiceServer) ApiUnserve(ctx context.Context, req *ApiUnserveRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiUnserve not implemented")
}
func (*UnimplementedVmmRuntimeServiceServer) List(ctx context.Context, req *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedVmmRuntimeServiceServer) QueryState(ctx context.Context, req *QueryStateRequest) (*QueryStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryState not implemented")
}
func (*UnimplementedVmmRuntimeServiceServer) Create(ctx context.Context, req *CreateRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedVmmRuntimeServiceServer) Start(ctx context.Context, req *StartRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedVmmRuntimeServiceServer) Kill(ctx context.Context, req *KillRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kill not implemented")
}
func (*UnimplementedVmmRuntimeServiceServer) Delete(ctx context.Context, req *DeleteRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterVmmRuntimeServiceServer(s *grpc.Server, srv VmmRuntimeServiceServer) {
	s.RegisterService(&_VmmRuntimeService_serviceDesc, srv)
}

func _VmmRuntimeService_ApiServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiServeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmmRuntimeServiceServer).ApiServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/os.machine.runtime.VmmRuntimeService/ApiServe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmmRuntimeServiceServer).ApiServe(ctx, req.(*ApiServeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmmRuntimeService_ApiUnserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiUnserveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmmRuntimeServiceServer).ApiUnserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/os.machine.runtime.VmmRuntimeService/ApiUnserve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmmRuntimeServiceServer).ApiUnserve(ctx, req.(*ApiUnserveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmmRuntimeService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmmRuntimeServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/os.machine.runtime.VmmRuntimeService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmmRuntimeServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmmRuntimeService_QueryState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmmRuntimeServiceServer).QueryState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/os.machine.runtime.VmmRuntimeService/QueryState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmmRuntimeServiceServer).QueryState(ctx, req.(*QueryStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmmRuntimeService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmmRuntimeServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/os.machine.runtime.VmmRuntimeService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmmRuntimeServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmmRuntimeService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmmRuntimeServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/os.machine.runtime.VmmRuntimeService/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmmRuntimeServiceServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmmRuntimeService_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmmRuntimeServiceServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/os.machine.runtime.VmmRuntimeService/Kill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmmRuntimeServiceServer).Kill(ctx, req.(*KillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmmRuntimeService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmmRuntimeServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/os.machine.runtime.VmmRuntimeService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmmRuntimeServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VmmRuntimeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "os.machine.runtime.VmmRuntimeService",
	HandlerType: (*VmmRuntimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApiServe",
			Handler:    _VmmRuntimeService_ApiServe_Handler,
		},
		{
			MethodName: "ApiUnserve",
			Handler:    _VmmRuntimeService_ApiUnserve_Handler,
		},
		{
			MethodName: "List",
			Handler:    _VmmRuntimeService_List_Handler,
		},
		{
			MethodName: "QueryState",
			Handler:    _VmmRuntimeService_QueryState_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _VmmRuntimeService_Create_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _VmmRuntimeService_Start_Handler,
		},
		{
			MethodName: "Kill",
			Handler:    _VmmRuntimeService_Kill_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _VmmRuntimeService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/os/machine/runtime/v0/api.proto",
}

func (m *ApiServeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiServeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiServeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MaxMachines != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MaxMachines))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ImageDir) > 0 {
		i -= len(m.ImageDir)
		copy(dAtA[i:], m.ImageDir)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ImageDir)))
		i--
		dAtA[i] = 0x22
	}
	if m.ApiTimeout != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ApiTimeout))
		i--
		dAtA[i] = 0x18
	}
	if m.ApiPort != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ApiPort))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ApiHostname) > 0 {
		i -= len(m.ApiHostname)
		copy(dAtA[i:], m.ApiHostname)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ApiHostname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApiUnserveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiUnserveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiUnserveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ApiTimeout != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ApiTimeout))
		i--
		dAtA[i] = 0x18
	}
	if m.ApiPort != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ApiPort))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ApiHostname) > 0 {
		i -= len(m.ApiHostname)
		copy(dAtA[i:], m.ApiHostname)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ApiHostname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ApiTimeout != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ApiTimeout))
		i--
		dAtA[i] = 0x18
	}
	if m.ApiPort != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ApiPort))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ApiHostname) > 0 {
		i -= len(m.ApiHostname)
		copy(dAtA[i:], m.ApiHostname)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ApiHostname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		for iNdEx := len(m.Id) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Id[iNdEx])
			copy(dAtA[i:], m.Id[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Id[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ApiTimeout != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ApiTimeout))
		i--
		dAtA[i] = 0x18
	}
	if m.ApiPort != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ApiPort))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ApiHostname) > 0 {
		i -= len(m.ApiHostname)
		copy(dAtA[i:], m.ApiHostname)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ApiHostname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x22
	}
	if m.ApiTimeout != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ApiTimeout))
		i--
		dAtA[i] = 0x18
	}
	if m.ApiPort != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ApiPort))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ApiHostname) > 0 {
		i -= len(m.ApiHostname)
		copy(dAtA[i:], m.ApiHostname)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ApiHostname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ImageDir) > 0 {
		i -= len(m.ImageDir)
		copy(dAtA[i:], m.ImageDir)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ImageDir)))
		i--
		dAtA[i] = 0x12
	}
	if m.CreateRequest != nil {
		{
			size, err := m.CreateRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x22
	}
	if m.ApiTimeout != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ApiTimeout))
		i--
		dAtA[i] = 0x18
	}
	if m.ApiPort != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ApiPort))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ApiHostname) > 0 {
		i -= len(m.ApiHostname)
		copy(dAtA[i:], m.ApiHostname)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ApiHostname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StartRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x22
	}
	if m.ApiTimeout != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ApiTimeout))
		i--
		dAtA[i] = 0x18
	}
	if m.ApiPort != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ApiPort))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ApiHostname) > 0 {
		i -= len(m.ApiHostname)
		copy(dAtA[i:], m.ApiHostname)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ApiHostname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KillRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KillRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KillRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x22
	}
	if m.ApiTimeout != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ApiTimeout))
		i--
		dAtA[i] = 0x18
	}
	if m.ApiPort != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ApiPort))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ApiHostname) > 0 {
		i -= len(m.ApiHostname)
		copy(dAtA[i:], m.ApiHostname)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ApiHostname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x22
	}
	if m.ApiTimeout != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ApiTimeout))
		i--
		dAtA[i] = 0x18
	}
	if m.ApiPort != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ApiPort))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ApiHostname) > 0 {
		i -= len(m.ApiHostname)
		copy(dAtA[i:], m.ApiHostname)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ApiHostname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ApiServeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApiHostname)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ApiPort != 0 {
		n += 1 + sovApi(uint64(m.ApiPort))
	}
	if m.ApiTimeout != 0 {
		n += 1 + sovApi(uint64(m.ApiTimeout))
	}
	l = len(m.ImageDir)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.MaxMachines != 0 {
		n += 1 + sovApi(uint64(m.MaxMachines))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApiUnserveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApiHostname)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ApiPort != 0 {
		n += 1 + sovApi(uint64(m.ApiPort))
	}
	if m.ApiTimeout != 0 {
		n += 1 + sovApi(uint64(m.ApiTimeout))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApiHostname)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ApiPort != 0 {
		n += 1 + sovApi(uint64(m.ApiPort))
	}
	if m.ApiTimeout != 0 {
		n += 1 + sovApi(uint64(m.ApiTimeout))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApiHostname)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ApiPort != 0 {
		n += 1 + sovApi(uint64(m.ApiPort))
	}
	if m.ApiTimeout != 0 {
		n += 1 + sovApi(uint64(m.ApiTimeout))
	}
	if len(m.Id) > 0 {
		for _, s := range m.Id {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApiHostname)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ApiPort != 0 {
		n += 1 + sovApi(uint64(m.ApiPort))
	}
	if m.ApiTimeout != 0 {
		n += 1 + sovApi(uint64(m.ApiTimeout))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateRequest != nil {
		l = m.CreateRequest.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ImageDir)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApiHostname)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ApiPort != 0 {
		n += 1 + sovApi(uint64(m.ApiPort))
	}
	if m.ApiTimeout != 0 {
		n += 1 + sovApi(uint64(m.ApiTimeout))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StartRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApiHostname)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ApiPort != 0 {
		n += 1 + sovApi(uint64(m.ApiPort))
	}
	if m.ApiTimeout != 0 {
		n += 1 + sovApi(uint64(m.ApiTimeout))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KillRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApiHostname)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ApiPort != 0 {
		n += 1 + sovApi(uint64(m.ApiPort))
	}
	if m.ApiTimeout != 0 {
		n += 1 + sovApi(uint64(m.ApiTimeout))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApiHostname)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ApiPort != 0 {
		n += 1 + sovApi(uint64(m.ApiPort))
	}
	if m.ApiTimeout != 0 {
		n += 1 + sovApi(uint64(m.ApiTimeout))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ApiServeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiServeRequest{`,
		`ApiHostname:` + fmt.Sprintf("%v", this.ApiHostname) + `,`,
		`ApiPort:` + fmt.Sprintf("%v", this.ApiPort) + `,`,
		`ApiTimeout:` + fmt.Sprintf("%v", this.ApiTimeout) + `,`,
		`ImageDir:` + fmt.Sprintf("%v", this.ImageDir) + `,`,
		`MaxMachines:` + fmt.Sprintf("%v", this.MaxMachines) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiUnserveRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiUnserveRequest{`,
		`ApiHostname:` + fmt.Sprintf("%v", this.ApiHostname) + `,`,
		`ApiPort:` + fmt.Sprintf("%v", this.ApiPort) + `,`,
		`ApiTimeout:` + fmt.Sprintf("%v", this.ApiTimeout) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListRequest{`,
		`ApiHostname:` + fmt.Sprintf("%v", this.ApiHostname) + `,`,
		`ApiPort:` + fmt.Sprintf("%v", this.ApiPort) + `,`,
		`ApiTimeout:` + fmt.Sprintf("%v", this.ApiTimeout) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListResponse{`,
		`ApiHostname:` + fmt.Sprintf("%v", this.ApiHostname) + `,`,
		`ApiPort:` + fmt.Sprintf("%v", this.ApiPort) + `,`,
		`ApiTimeout:` + fmt.Sprintf("%v", this.ApiTimeout) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryStateRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryStateRequest{`,
		`ApiHostname:` + fmt.Sprintf("%v", this.ApiHostname) + `,`,
		`ApiPort:` + fmt.Sprintf("%v", this.ApiPort) + `,`,
		`ApiTimeout:` + fmt.Sprintf("%v", this.ApiTimeout) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryStateResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryStateResponse{`,
		`CreateRequest:` + strings.Replace(this.CreateRequest.String(), "CreateRequest", "CreateRequest", 1) + `,`,
		`ImageDir:` + fmt.Sprintf("%v", this.ImageDir) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateRequest{`,
		`ApiHostname:` + fmt.Sprintf("%v", this.ApiHostname) + `,`,
		`ApiPort:` + fmt.Sprintf("%v", this.ApiPort) + `,`,
		`ApiTimeout:` + fmt.Sprintf("%v", this.ApiTimeout) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Image:` + fmt.Sprintf("%v", this.Image) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StartRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StartRequest{`,
		`ApiHostname:` + fmt.Sprintf("%v", this.ApiHostname) + `,`,
		`ApiPort:` + fmt.Sprintf("%v", this.ApiPort) + `,`,
		`ApiTimeout:` + fmt.Sprintf("%v", this.ApiTimeout) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KillRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KillRequest{`,
		`ApiHostname:` + fmt.Sprintf("%v", this.ApiHostname) + `,`,
		`ApiPort:` + fmt.Sprintf("%v", this.ApiPort) + `,`,
		`ApiTimeout:` + fmt.Sprintf("%v", this.ApiTimeout) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteRequest{`,
		`ApiHostname:` + fmt.Sprintf("%v", this.ApiHostname) + `,`,
		`ApiPort:` + fmt.Sprintf("%v", this.ApiPort) + `,`,
		`ApiTimeout:` + fmt.Sprintf("%v", this.ApiTimeout) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ApiServeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiServeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiServeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiHostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiHostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiPort", wireType)
			}
			m.ApiPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiTimeout", wireType)
			}
			m.ApiTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageDir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMachines", wireType)
			}
			m.MaxMachines = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxMachines |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiUnserveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiUnserveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiUnserveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiHostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiHostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiPort", wireType)
			}
			m.ApiPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiTimeout", wireType)
			}
			m.ApiTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiHostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiHostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiPort", wireType)
			}
			m.ApiPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiTimeout", wireType)
			}
			m.ApiTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiHostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiHostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiPort", wireType)
			}
			m.ApiPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiTimeout", wireType)
			}
			m.ApiTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiHostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiHostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiPort", wireType)
			}
			m.ApiPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiTimeout", wireType)
			}
			m.ApiTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateRequest == nil {
				m.CreateRequest = &CreateRequest{}
			}
			if err := m.CreateRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageDir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= VirtualMachineStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiHostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiHostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiPort", wireType)
			}
			m.ApiPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiTimeout", wireType)
			}
			m.ApiTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiHostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiHostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiPort", wireType)
			}
			m.ApiPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiTimeout", wireType)
			}
			m.ApiTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KillRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiHostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiHostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiPort", wireType)
			}
			m.ApiPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiTimeout", wireType)
			}
			m.ApiTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiHostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiHostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiPort", wireType)
			}
			m.ApiPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiTimeout", wireType)
			}
			m.ApiTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
