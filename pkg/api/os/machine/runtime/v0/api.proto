// To regenerate api.pb.go run `codegen -p`.
syntax = "proto3";

package os.machine.runtime;

import "gogoproto/gogo.proto";
import "google/protobuf/empty.proto";

option go_package = "alt-os/api/os/machine/runtime/v0";
option (gogoproto.gostring_all) = true;
option (gogoproto.equal_all) = true;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) =  true;
option (gogoproto.populate_all) = false;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;

// VmmRuntimeService is a service for managing virtual machine monitor runtimes.
// After a successful call to ApiServe the runtime service can begin
// operating virtual machines using the other service methods.
service VmmRuntimeService {
	// ApiServe enables the VMM runtime service api according to the given configuration.
	rpc ApiServe(ApiServeRequest) returns (google.protobuf.Empty) {}
	// ApiUnserve stops all virtual machines and disables the VMM runtime service api.
	rpc ApiUnserve(ApiUnserveRequest) returns (google.protobuf.Empty) {}
	// List gets all virtual machines the runtime knows about.
	rpc List(ListRequest) returns (ListResponse) {}
	// QueryState gets the state of a specified virtual machine.
	rpc QueryState(QueryStateRequest) returns (QueryStateResponse) {}
	// Create creates a new virtual machine and begins preparing it to be started.
	rpc Create(CreateRequest) returns (google.protobuf.Empty) {}
	// Start begins running a created virtual machine.
	rpc Start(StartRequest) returns (google.protobuf.Empty) {}
	// Kill stops a running virtual machine.
	rpc Kill(KillRequest) returns (google.protobuf.Empty) {}
	// Delete removes a stopped virtual machine from the runtime.
	rpc Delete(DeleteRequest) returns (google.protobuf.Empty) {}
}

// ApiServeRequest specifies a VmmRuntimeService.Serve call.
message ApiServeRequest {
	// The hostname for the API server to listen on.
	string api_hostname = 1;
	// The port for the API server to listen on.
	uint32 api_port = 2;
	// The number of seconds to timeout the API request.
	uint32 api_timeout = 3;
	// The root directory of images to load from.
	string image_dir = 4;
	// The maximum number of virtual machines to allow.
	int64 max_machines = 5;
}

// ApiUnserveRequest specifies a VmmRuntimeService.Unserve call.
message ApiUnserveRequest {
	// The hostname of the listening API server to operate on.
	string api_hostname = 1;
	// The port of the listening API server to operate on.
	uint32 api_port = 2;
	// The number of seconds to timeout the API request.
	uint32 api_timeout = 3;
}

// ListRequest specifies a VmmRuntimeService.List call.
message ListRequest {
	// The hostname of the listening API server to operate on.
	string api_hostname = 1;
	// The port of the listening API server to operate on.
	uint32 api_port = 2;
	// The number of seconds to timeout the API request.
	uint32 api_timeout = 3;
}

// ListResponse returns the result of a VmmRuntimeService.List call.
message ListResponse {
	// The hostname of the listening API server to operate on.
	string api_hostname = 1;
	// The port of the listening API server to operate on.
	uint32 api_port = 2;
	// The number of seconds to timeout the API request.
	uint32 api_timeout = 3;
	// The unique id of the virtual machine.
	repeated string id = 4;
}

// QueryStateRequest specifies a VmmRuntimeService.QueryState call.
message QueryStateRequest {
	// The hostname of the listening API server to operate on.
	string api_hostname = 1;
	// The port of the listening API server to operate on.
	uint32 api_port = 2;
	// The number of seconds to timeout the API request.
	uint32 api_timeout = 3;
	// The unique id of the virtual machine.
	string id = 4;
}

// QueryStateResponse returns the result of a VmmRuntimeService.QueryState call.
message QueryStateResponse {
	// The request used to create the virtual machine's runtime.
	CreateRequest create_request = 1;
	// The virtual machine's runtime image directory.
	string image_dir = 2;
	// The runtime status of the virtual machine.
	VirtualMachineStatus status = 3;
}

// CreateRequest specifies a VmmRuntimeService.Create call.
message CreateRequest {
	// The hostname of the listening API server to operate on.
	string api_hostname = 1;
	// The port of the listening API server to operate on.
	uint32 api_port = 2;
	// The number of seconds to timeout the API request.
	uint32 api_timeout = 3;
	// The unique id of the virtual machine.
	string id = 4;
	// The virtual machine's image directory.
	string image = 5;
}

// StartRequest specifies a VmmRuntimeService.Start call.
message StartRequest {
	// The hostname of the listening API server to operate on.
	string api_hostname = 1;
	// The port of the listening API server to operate on.
	uint32 api_port = 2;
	// The number of seconds to timeout the API request.
	uint32 api_timeout = 3;
	// The unique id of the virtual machine.
	string id = 4;
}

// KillRequest specifies a VmmRuntimeService.Kill call.
message KillRequest {
	// The hostname of the listening API server to operate on.
	string api_hostname = 1;
	// The port of the listening API server to operate on.
	uint32 api_port = 2;
	// The number of seconds to timeout the API request.
	uint32 api_timeout = 3;
	// The unique id of the virtual machine.
	string id = 4;
}

// DeleteRequest specifies a VmmRuntimeService.Delete call.
message DeleteRequest {
	// The hostname of the listening API server to operate on.
	string api_hostname = 1;
	// The port of the listening API server to operate on.
	uint32 api_port = 2;
	// The number of seconds to timeout the API request.
	uint32 api_timeout = 3;
	// The unique id of the virtual machine.
	string id = 4;
}

// VirtualMachineStatus represents the runtime state of a virtual machine.
enum VirtualMachineStatus {
	// The virtual machine is being created.
	CREATING = 0;
	// The create operation has finished and the virtual machine has neither exited nor started.
	CREATED = 1;
	// The virtual machine has started but has not exited.
	RUNNING = 2;
	// The virtual machine has exited.
	STOPPED = 3;
}
